{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>This repository contains all of the fundamentals to learn how to use the tools for introductory Systems Administration, which is essential in the process of building software.</p>"},{"location":"Docker/","title":"Docker","text":"<p>Docker is a popular open-source platform used for developing, shipping, and running applications. At its core, Docker is about containers. A container is a lightweight, standalone, executable package that includes everything needed to run a piece of software, including the code, runtime, libraries, and system tools. Containers are isolated from each other and the host system, ensuring consistent operation regardless of where the container is deployed. Now, let's see some terminology and concepts that revolve around this \"container\" thing:</p> <ol> <li> <p>Images: Containers are created from Docker images. An image is a lightweight, standalone, and executable software package that includes everything needed to run a container: code, runtime, system tools, libraries, and settings. Docker images are built from a Dockerfile, which is a script composed of various commands and arguments that define the image.</p> </li> <li> <p>Dockerfile: A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using <code>docker build</code> users can create an image from a Dockerfile.</p> </li> <li> <p>Docker Hub and Registries: Docker Hub is a service provided by Docker for finding and sharing container images with your team. Private and public repositories can be used to host container images. Other registries include AWS Elastic Container Registry, Google Container Registry, etc.</p> </li> <li> <p>Portability and Consistency: Docker ensures that an application works seamlessly in any environment. A Docker container runs identically whether on a developer\u2019s laptop, a test server, or in production, which eliminates the \u201cit works on my machine\u201d problem.</p> </li> <li> <p>Microservices Architecture: Docker is conducive to microservices architecture \u2013 a design approach to build a single application as a suite of small services, each running in its own container.</p> </li> <li> <p>Docker Compose: For defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application\u2019s services, networks, and volumes, and then create and start all the services from your configuration with a single command.</p> </li> <li> <p>Docker Swarm: Docker\u2019s orchestration and cluster management tool. Swarm lets you manage a cluster of Docker hosts and deploy application services to them in a scalable, reliable way.</p> </li> </ol> <p>Docker simplifies the deployment of applications, as it allows them to be bundled with all of their dependencies into a single container. This can greatly reduce conflicts between teams running different software on the same infrastructure.</p>"},{"location":"Docker/#minimal-docker-example-an-hello-world-app-in-python","title":"Minimal docker example: an hello world app in python","text":""},{"location":"Docker/#create-the-python-application","title":"Create the Python Application","text":"<p>First, we'll create a simple Python script. Let's name it <code>app.py</code>.</p> <pre><code># app.py\nprint(\"Hello, World!\")\n</code></pre>"},{"location":"Docker/#create-a-dockerfile","title":"Create a Dockerfile","text":"<p>Next, we'll create a Dockerfile to specify how our Docker image should be built.</p> <pre><code># Dockerfile\nFROM python:3.8-slim\n\n# Copy the Python script into the container at /app\nWORKDIR /app\nCOPY app.py /app\n\n# Run the Python script when the container launches\nCMD [\"python\", \"./app.py\"]\n</code></pre> <p>This Dockerfile performs the following steps: 1. Start from a base image containing Python 3.8 (<code>python:3.8-slim</code>). 2. Set the working directory inside the container to <code>/app</code>. 3. Copy the <code>app.py</code> file from your local directory into <code>/app</code> in the container. 4. Set the command to run the Python script when the container starts.</p>"},{"location":"Docker/#build-the-docker-image","title":"Build the Docker Image","text":"<p>Now, build the Docker image from the Dockerfile. Run this command in the directory containing the Dockerfile and <code>app.py</code>.</p> <pre><code>docker build -t hello-world .\n</code></pre> <p>This command builds the Docker image and tags it (<code>-t</code>) with the name <code>hello-world</code>.</p>"},{"location":"Docker/#run-the-docker-container","title":"Run the Docker Container","text":"<p>Finally, run a container based on the image you just built:</p> <pre><code>docker run hello-world\n</code></pre> <p>This command creates and starts a container from the <code>hello-world</code> image. You should see the output <code>Hello, World!</code> in your terminal, which demonstrates that the Python script is executed inside the container.</p> <p>That's it! This is a minimal example to demonstrate the basic workflow of Docker: writing a simple application, creating a Dockerfile, building an image, and running a container from that image.</p>"},{"location":"Docker/#using-docker-with-something-like-numpy","title":"Using docker with something like \"numpy\"","text":""},{"location":"Docker/#create-the-python-application_1","title":"Create the Python Application","text":"<p>First, let's modify our <code>app.py</code> to use <code>numpy</code>.</p> <pre><code># app.py\nimport numpy as np\n\nprint(\"Hello, World! Here's a random number from NumPy:\", np.random.rand())\n</code></pre>"},{"location":"Docker/#create-a-dockerfile_1","title":"Create a Dockerfile","text":"<p>Now, we'll update our Dockerfile to set up a virtual environment and install <code>numpy</code>.</p> <pre><code># Dockerfile\nFROM python:3.8-slim\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the Python script and requirements file into the container\nCOPY app.py /app\nCOPY requirements.txt /app\n\n# Set up a virtual environment\nRUN python -m venv venv\nENV PATH=\"/app/venv/bin:$PATH\"\n\n# Install numpy\nRUN pip install numpy\n\n# Run the Python script when the container launches\nCMD [\"python\", \"./app.py\"]\n</code></pre> <p>In this Dockerfile: 1. We set the working directory to <code>/app</code>. 2. We copy <code>app.py</code> and a <code>requirements.txt</code> file into <code>/app</code> in the container. 3. We create a Python virtual environment inside the container. 4. We activate the virtual environment and install <code>numpy</code>.</p>"},{"location":"Docker/#create-a-requirements-file","title":"Create a Requirements File","text":"<p>Create a <code>requirements.txt</code> file specifying <code>numpy</code> and its version.</p> <pre><code>numpy==1.21.0\n</code></pre>"},{"location":"Docker/#build-the-docker-image_1","title":"Build the Docker Image","text":"<p>Build the Docker image using the updated Dockerfile.</p> <pre><code>docker build -t hello-world-numpy .\n</code></pre>"},{"location":"Docker/#run-the-docker-container_1","title":"Run the Docker Container","text":"<p>Finally, run the container based on the new image.</p> <pre><code>docker run hello-world-numpy\n</code></pre> <p>This command will output a greeting message along with a random number generated by NumPy, demonstrating that NumPy is installed and working inside the container's virtual environment.</p> <p>This example shows how to include a Python virtual environment and specific dependencies (like <code>numpy</code>) in a Docker container, which is a common practice for Python development to ensure consistent and isolated environments.</p>"},{"location":"Docker/#uploading-a-docker-image-to-docker-hub","title":"Uploading a Docker Image to Docker Hub","text":""},{"location":"Docker/#create-a-docker-hub-account","title":"Create a Docker Hub Account","text":"<p>If you don't already have a Docker Hub account, you'll need to create one. Go to Docker Hub and sign up for a free account.</p>"},{"location":"Docker/#log-in-to-docker-hub-from-the-command-line","title":"Log in to Docker Hub from the Command Line","text":"<p>Once you have your Docker Hub account, you need to log in from your command line. Open your terminal and use the following command:</p> <pre><code>docker login\n</code></pre> <p>You'll be prompted to enter your Docker Hub username and password. Once logged in, you can start pushing images to your Docker Hub repository.</p>"},{"location":"Docker/#tag-your-docker-image","title":"Tag Your Docker Image","text":"<p>Before you can upload your image to Docker Hub, you need to tag it with your Docker Hub username and the repository name you want to use. The general format for the tag is:</p> <pre><code>docker tag local-image:tag username/repository:tag\n</code></pre> <p>For example, if your Docker Hub username is <code>username</code> and you want to name your repository <code>hello-world-numpy</code>, and you're using the <code>latest</code> tag, the command would be:</p> <pre><code>docker tag hello-world-numpy:latest username/hello-world-numpy:latest\n</code></pre> <p>This command tags the <code>hello-world-numpy</code> image from our previous example.</p>"},{"location":"Docker/#push-the-image-to-docker-hub","title":"Push the Image to Docker Hub","text":"<p>Now, push the tagged image to Docker Hub using the following command:</p> <pre><code>docker push username/repository:tag\n</code></pre> <p>Continuing our example, you would run:</p> <pre><code>docker push username/hello-world-numpy:latest\n</code></pre> <p>This command uploads the <code>hello-world-numpy</code> image to your Docker Hub repository.</p>"},{"location":"Docker/#verify-the-upload","title":"Verify the Upload","text":"<p>After the push operation completes, go to your Docker Hub account and check your repositories. You should see the <code>hello-world-numpy</code> repository listed with the <code>latest</code> tag.</p>"},{"location":"Docker/#note","title":"Note:","text":"<ul> <li>Ensure that your local image name and tag match exactly with the ones you're trying to push to Docker Hub.</li> <li>Remember to replace <code>username</code>, <code>repository</code>, and <code>tag</code> with your actual Docker Hub username, desired repository name, and tag.</li> <li>If you want your repository to be private, you need to set it as private on Docker Hub. By default, repositories are public.</li> </ul>"},{"location":"Git/","title":"Git","text":"<pre><code>to add : https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase\nTODOs: Git worktree, git bare repository, git submodules\n</code></pre>"},{"location":"Git/#git-basic-configuration","title":"git basic configuration","text":"<p>When you install git for the first time on the new machine. Set the default command line editor as vim.</p> <pre><code>    git config --global core.editor nvim\n    git config --global user.name \"John Doe\"\n    git config --global user.email \"john@doe.net\"\n    git config --global color.ui \"auto\"\n</code></pre> <p>To list all of the configs:</p> <pre><code>    git config --list\n</code></pre>"},{"location":"Git/#git-starter","title":"git starter","text":"<p>To start a new git project on github:</p> <pre><code>    git init\n    git add .gitignore # for the files you don't want to commit\n    git remote add 'name of the remote' www.github.com/angelobattaglia/progetto\n    git remote set-url 'name of the remote' git@github.com:angelobattaglia/progetto.git\n    git add -A or git add .\n    git commit -a (-m \"first commit\")\n    git push 'name of the remote' master\n</code></pre> <p>If you want remove some file that you added to the .gitignore later:</p> <pre><code>    git rm --cached filetoremovefromthecache\n</code></pre> <p>If you want to show all of the graph of commits just type:</p> <pre><code>    git log --all --graph --decorate (--oneline)\n</code></pre> <p>Updating local repository from remote. Let's say your local branch is out of date, and you need to fetch changes from the same branch but from remote. In order to do this, we need to fetch from remote and then merge our local branch with the remote branch. So a git pull is a shortcut to  perform a git fetch followed up by a git merge.</p> <pre><code>    git pull\n</code></pre>"},{"location":"Git/#working-with-remote","title":"Working with Remote","text":"<p>To see how many remote for a git repository:</p> <pre><code>    git remote -v\n</code></pre> <p>To add a remote to a git repository with https:</p> <pre><code>    git remote add \"Remote 1\" www.github.com/angelo/progetto\n    git remote add \"Remote 2\" www.gitlab.com/angelo/progetto\n</code></pre> <p>To remove a remote of an already initialized git repository:</p> <pre><code>    git remote remove \"Remote 1\"\n    git remote remove \"Remote 2\"\n</code></pre> <p>Push to remote(s):</p> <pre><code>    git push \"remote name\" \"branch name\"\n    git push all\n</code></pre>"},{"location":"Git/#branching","title":"Branching","text":"<p>Listing branches:</p> <p>List all the branches of a given project</p> <pre><code>    git branch -a\n</code></pre> <pre><code>    git branch -r   # list remote branches\n</code></pre> <pre><code>    git branch      # list local branches\n</code></pre> <p>To change from the current branch, for example, to another one use the argument \"checkout\":</p> <pre><code>    git checkout 'branchname'\n</code></pre> <p>Local branches: colored white. Remote branches: colored red \"remotes/origin\" If you want to abort all current changes that aren't committed:</p> <pre><code>    git reset --hard\n</code></pre> <p>If you just want to restore one file:</p> <pre><code>    git checkout filetorestore.txt\n</code></pre> <p>Branch pointed as \"HEAD\" is the latest committed among all the branches</p>"},{"location":"Git/#git-checkout-moving-between-branches-in-git","title":"Git Checkout (moving between branches in git)","text":"<p>The easiest way to switch branch on Git is to use the \u201cgit checkout\u201d command and specify the name of the branch you want to switch to.  If the destination branch does not exist, you have to append the \u201c-b\u201d option,  otherwise you won\u2019t be able to switch to that branch.</p> <pre><code>git checkout &lt;existing_branch&gt;\n</code></pre>"},{"location":"Git/#contributing","title":"Contributing","text":"<p>Here's how you can modify the repo and send a pull request:</p>"},{"location":"Git/#step-1-fork-the-repository","title":"Step 1: Fork the Repository","text":"<p>Before making any changes, you need to fork the repository so that you can push your changes to your own version of the repo. 1. Go to the repo: username/repo 2. Click the \"Fork\" button on the top-right. 3. This will create a copy of the repo in your own GitHub account.</p>"},{"location":"Git/#step-2-clone-your-forked-repository","title":"Step 2: Clone Your Forked Repository","text":"<p>Since you've already cloned the original repo to your desktop, you'll need to switch to your own fork.</p>"},{"location":"Git/#check-remote-repositories","title":"Check Remote Repositories","text":"<p>Run:</p> <pre><code>git remote -v\n</code></pre> <p>It will show:</p> <pre><code>origin  https://github.com/username/repo.git (fetch)\norigin  https://github.com/username/repo.git (push)\n</code></pre> <p>Since you don\u2019t have push access to the original repo, you need to change it to your own fork.</p>"},{"location":"Git/#change-the-remote-to-your-fork","title":"Change the Remote to Your Fork","text":"<p>Replace <code>your-username</code> with your GitHub username:</p> <pre><code>git remote set-url origin https://github.com/your-username/algo.git\n</code></pre> <p>Now, verify the remote again:</p> <pre><code>git remote -v\n</code></pre> <p>It should show:</p> <pre><code>origin  https://github.com/your-username/algo.git (fetch)\norigin  https://github.com/your-username/algo.git (push)\n</code></pre>"},{"location":"Git/#step-3-create-a-new-branch","title":"Step 3: Create a New Branch","text":"<p>It's best practice to work in a new branch rather than <code>main</code> or <code>master</code>.</p> <pre><code>git checkout -b my-feature\n</code></pre> <p>Replace <code>my-feature</code> with a meaningful branch name.</p>"},{"location":"Git/#step-4-make-your-changes","title":"Step 4: Make Your Changes","text":"<p>Modify the code as needed, then stage the changes:</p> <pre><code>git add .\n</code></pre> <p>Commit the changes:</p> <pre><code>git commit -m \"Added new feature XYZ\"\n</code></pre>"},{"location":"Git/#step-5-push-to-your-fork","title":"Step 5: Push to Your Fork","text":"<p>Push your branch to your forked repository:</p> <pre><code>git push origin my-feature\n</code></pre>"},{"location":"Git/#step-6-create-a-pull-request","title":"Step 6: Create a Pull Request","text":"<ol> <li>Go to your fork of the repository on GitHub.</li> <li>You'll see a prompt like \"Compare &amp; pull request\"\u2014click it.</li> <li>Add a title and description for your changes.</li> <li>Click Create pull request.</li> </ol> <p>Now, the original repository owner can review and merge your changes.</p>"},{"location":"Git/#optional-keep-your-fork-updated","title":"Optional: Keep Your Fork Updated","text":"<p>If the original repo gets updates, you should sync your fork to avoid conflicts:</p> <pre><code>git remote add upstream https://github.com/username/repo.git\ngit fetch upstream\ngit merge upstream/main\ngit push origin main\n</code></pre>"},{"location":"Git/#then-again","title":"Then again:","text":"<p>You can list all your local branches and see which one you're currently on by using the following command:</p> <pre><code>git branch\n</code></pre> <p>This command will display all local branches, with the branch you're on marked by an asterisk (<code>*</code>). If you also want to see the remote branches, you can use:</p> <pre><code>git branch -a\n</code></pre> <p>Additionally, running <code>git status</code> in your terminal will show you the current branch at the top of the status message.</p>"},{"location":"Git/#how-to-merge","title":"How to merge","text":"<p>Merging in Git, especially when working with GitHub, is a common task that integrates changes from one branch into another. Here's a comprehensive guide on how to merge changes using Git with GitHub, and subsequently update your local repository to reflect these changes.</p>"},{"location":"Git/#merging-in-github","title":"Merging in GitHub","text":"<ol> <li> <p>Open a Pull Request (PR): A Pull Request in GitHub is essentially a request to merge one branch into another. Navigate to the repository where you're contributing, and click on \"Pull Requests\" &gt; \"New pull request\". Choose the base branch that you want to merge into and the compare branch that you want to merge from.</p> </li> <li> <p>Review the Changes: Before merging, it's a good practice to review the changes. GitHub provides a diff view that shows the added, modified, or removed lines.</p> </li> <li> <p>Resolve Conflicts (if any): If there are any conflicts, GitHub will alert you. You must resolve these conflicts before proceeding. This can often be done directly in the GitHub interface or by checking out the branch locally and resolving the conflicts manually.</p> </li> <li> <p>Merge the Pull Request: Once any conflicts are resolved and you're ready to integrate the changes, click the \"Merge pull request\" button. Optionally, you can add a merge commit message to document the merge.</p> </li> </ol>"},{"location":"Git/#updating-your-local-repository-after-merging","title":"Updating Your Local Repository After Merging","text":"<p>After merging changes on GitHub, you'll want to update your local repository to reflect the merged state of the remote repository.</p> <ol> <li> <p>Switch to the Relevant Branch: Make sure you're on the branch into which you merged the changes. You can switch branches with the <code>git checkout</code> command.    <code>bash    git checkout main</code>    Replace <code>main</code> with the name of the branch you merged the changes into.</p> </li> <li> <p>Fetch the Latest Changes: Fetch the changes from the remote repository without merging them into your local repository.    <code>bash    git fetch origin</code> <code>origin</code> is the default name for the remote repository. If you've named it differently, replace <code>origin</code> with the name you've given.</p> </li> <li> <p>Merge the Changes: Now, merge the fetched changes into your local branch.    <code>bash    git merge origin/main</code>    Replace <code>main</code> with the name of your branch. This command merges the remote changes into your current branch, synchronizing it with the remote repository.</p> </li> <li> <p>Push Local Changes (if any): If you've made any local changes that need to be synchronized with the remote repository, push them using:    <code>bash    git push origin main</code>    Again, replace <code>main</code> with the appropriate branch name.</p> </li> </ol>"},{"location":"Git/#best-practices","title":"Best Practices","text":"<ul> <li>Regularly Pull Changes: To minimize merge conflicts, regularly pull changes from the remote repository to your local branches, especially before starting new work.</li> <li>Use Feature Branches: When working on new features or fixes, create separate branches for each task. This makes managing and merging changes easier.</li> <li>Communicate with Your Team: If you're working in a team, communicate about branch merges to avoid conflicts and duplicative work.</li> </ul> <p>Merging and updating your repository in Git can initially seem complex, but with practice, it becomes a routine part of managing code changes. By following these steps and best practices, you'll ensure that your project remains current and organized.</p>"},{"location":"Git/#after-merging","title":"After Merging","text":"<p>If you've merged changes on GitHub and your local repository isn't up to date with those changes, you can update your local repository by pulling the changes from GitHub. This process involves fetching the changes made on the remote and merging them into your local branch. Here's how you can do it:</p> <ol> <li> <p>Open your terminal or command prompt.</p> </li> <li> <p>Navigate to your local repository's directory:    Use the <code>cd</code> command to change directories to your local repository if you're not already there.    <code>bash    cd /path/to/your/repository</code></p> </li> <li> <p>Switch to the branch you want to update:    Ensure you're on the correct branch that you wish to update with the changes from GitHub. Typically, this is the main branch or the branch into which you've merged changes on GitHub.    <code>bash    git checkout main</code>    Replace <code>main</code> with the name of the branch you're updating if it's different.</p> </li> <li> <p>Pull the changes from GitHub:    Use the <code>git pull</code> command to fetch the changes from the remote repository and merge them into your local branch.    <code>bash    git pull origin main</code>    This command tells Git to fetch the changes from the <code>main</code> branch of the remote repository named <code>origin</code> and then merge those changes into your current branch. Again, replace <code>main</code> with your branch name if it's different.</p> </li> </ol> <p>The <code>git pull</code> command is essentially a combination of <code>git fetch</code> followed by <code>git merge</code>, where Git first fetches the changes from the specified remote branch and then merges those changes into the current branch of your local repository. This updates your local repository to reflect the state of the repository on GitHub.</p> <p>If you encounter any merge conflicts during this process, Git will alert you and ask you to resolve them. You'll need to manually edit the files with conflicts, choose which changes to keep, and then commit those resolutions before proceeding.</p> <p>Following these steps ensures that your local repository is synchronized with the changes made on GitHub, keeping your project files up to date.</p> <p>You can merge one or more branches. In the current branch, run:</p> <pre><code>    git merge \"branch-one\"\n    git merge \"branch-one\" \"branch-two\"\n</code></pre>"},{"location":"Git/#how-to-update-your-local-repository-after-merges-made-on-github","title":"How to update your local repository after merges made on GitHub","text":"<p>If you've merged changes on GitHub and your local repository isn't up to date with those changes, you can update your local repository by pulling the changes from GitHub. This process involves fetching the changes made on the remote and merging them into your local branch. Here's how you can do it:</p> <ol> <li> <p>Open your terminal or command prompt.</p> </li> <li> <p>Navigate to your local repository's directory: Use the <code>cd</code> command to change directories to your local repository if you're not already there.</p> </li> </ol> <pre><code>cd /path/to/your/repository\n</code></pre> <ol> <li>Switch to the branch you want to update: Ensure you're on the correct branch that you wish to update with the changes from GitHub. Typically, this is the main branch or the branch into which you've merged changes on GitHub.</li> </ol> <pre><code>git checkout main\n</code></pre> <p>Replace <code>main</code> with the name of the branch you're updating if it's different.</p> <ol> <li>Pull the changes from GitHub: Use the <code>git pull</code> command to fetch the changes from the remote repository and merge them into your local branch.</li> </ol> <pre><code>git pull origin main\n</code></pre> <p>This command tells Git to fetch the changes from the <code>main</code> branch of the remote repository named <code>origin</code> and then merge those changes into your current branch. Again, replace <code>main</code> with your branch name if it's different.</p> <p>The <code>git pull</code> command is essentially a combination of <code>git fetch</code> followed by <code>git merge</code>, where Git first fetches the changes from the specified remote branch and then merges those changes into the current branch of your local repository. This updates your local repository to reflect the state of the repository on GitHub.</p> <p>If you encounter any merge conflicts during this process, Git will alert you and ask you to resolve them. You'll need to manually edit the files with conflicts, choose which changes to keep, and then commit those resolutions before proceeding.</p> <p>Following these steps ensures that your local repository is synchronized with the changes made on GitHub, keeping your project files up to date.</p>"},{"location":"Git/#how-to-make-a-pull-request-on-github","title":"How to make a pull request on GitHub","text":"<ul> <li>Find a project you want to contribute to</li> <li>Fork it</li> <li>Clone it to your local system</li> <li>Create a new branch</li> <li>Write your changes</li> <li>Push it back to your repo</li> <li>Click the Compare &amp; pull request button</li> <li>Click Create pull request to open a new pull request</li> </ul>"},{"location":"Git/#tagging-a-particular-commit","title":"Tagging a particular commit","text":"<pre><code>    git tag \"tag name\" # Will tag the commit HEAD (the latest) if not specified otherwise\n    git tag \"hash of the commit\" \"tag name\" # Will tag the specific commit tagged with that hash\n</code></pre> <p>List all the tags:</p> <pre><code>    git tag\n</code></pre>"},{"location":"Git/#reset-and-rebase","title":"Reset and Rebase","text":"<p>To delete a commit with a typo in the commit message on your GitHub project, you can follow these steps:</p>"},{"location":"Git/#step-1-identify-the-commit","title":"Step 1: Identify the Commit","text":"<p>First, determine the hash (SHA-1) of the commit you want to delete. You can use <code>git log</code> to see the commit history and identify the offending commit.</p> <pre><code>git log\n</code></pre>"},{"location":"Git/#step-2-revert-to-the-previous-commit","title":"Step 2: Revert to the Previous Commit","text":"<p>If the mistaken commit is the latest one, you can reset your branch to the previous commit. If it's not the latest commit, you can use an interactive rebase to modify your commit history.</p>"},{"location":"Git/#if-the-mistaken-commit-is-the-latest","title":"If the mistaken commit is the latest:","text":"<ol> <li>Use <code>git reset</code> to revert to the previous commit:</li> </ol> <pre><code>git reset --hard HEAD~1\n</code></pre> <ol> <li>Force-push the changes to your remote repository:</li> </ol> <pre><code>git push origin +HEAD\n</code></pre>"},{"location":"Git/#step-3-interactive-rebase-if-the-commit-is-not-the-latest","title":"Step 3: Interactive Rebase (if the commit is not the latest)","text":"<p>If the commit is not the latest one, you can use an interactive rebase to remove or edit the commit.</p> <ol> <li>Start an interactive rebase from a point before the mistaken commit:</li> </ol> <pre><code>git rebase -i HEAD~n\n</code></pre> <p>Replace <code>n</code> with the number of commits back you want to rebase, which should include the mistaken commit.</p> <ol> <li> <p>In the interactive rebase editor, you will see a list of commits. Find the line with the mistaken commit message. You can either remove that line to delete the commit or change the word <code>pick</code> to <code>edit</code> to modify the commit.</p> </li> <li> <p>If you chose to edit the commit, after closing the editor, you can change the commit message:</p> </li> </ol> <pre><code>git commit --amend\n</code></pre> <ol> <li>Continue the rebase process:</li> </ol> <pre><code>git rebase --continue\n</code></pre> <ol> <li>Finally, force-push the changes to your remote repository:</li> </ol> <pre><code>git push origin +HEAD\n</code></pre>"},{"location":"Git/#step-4-verify","title":"Step 4: Verify","text":"<p>Ensure your repository's commit history looks correct:</p> <pre><code>git log\n</code></pre> <p>This should remove the commit with the typo from your project's history on GitHub. Remember, force-pushing changes the commit history and can affect other collaborators' work, so proceed with caution and communicate with your team if necessary.</p>"},{"location":"Git/#interactive-rebase","title":"Interactive Rebase","text":"<p>This step involves using interactive rebase to modify your commit history, which is particularly useful if the mistaken commit is not the latest one.</p> <ol> <li>Start Interactive Rebase:</li> </ol> <p>Begin by starting an interactive rebase from a point before the mistaken commit. You need to specify the number of commits back you want to rebase. For example, if you need to go back 3 commits:</p> <p><code>bash    git rebase -i HEAD~3</code></p> <p>This will open an editor with a list of the last 3 commits.</p> <ol> <li>Modify the Commit List:</li> </ol> <p>In the interactive rebase editor, you'll see a list of commits, each preceded by the word <code>pick</code>. It will look something like this:</p> <p><code>pick a1b2c3d Commit message before the mistake    pick b2c3d4e Mistaken commit explaination    pick c3d4e5f Commit message after the mistake</code></p> <p>Find the line with the mistaken commit message. You have two main options here:</p> <ul> <li> <p>Remove the Commit (if you want to delete it): Simply delete the line with the mistaken commit.</p> </li> <li> <p>Edit the Commit Message (if you want to correct it): Change the word <code>pick</code> to <code>edit</code> on the line with the mistaken commit:</p> <p><code>pick a1b2c3d Commit message before the mistake edit b2c3d4e Mistaken commit explaination pick c3d4e5f Commit message after the mistake</code></p> </li> <li> <p>Save and Exit the Editor:</p> </li> </ul> <p>Save the changes and exit the editor. The rebase process will pause at the commit you marked for editing.</p> <ol> <li>Edit the Commit:</li> </ol> <p>If you chose to edit the commit, you'll now be prompted to amend the commit. Change the commit message:</p> <p><code>bash    git commit --amend</code></p> <p>This will open an editor where you can correct the commit message. Change \"explaination\" to \"explanation\" and save the changes.</p> <ol> <li>Continue the Rebase:</li> </ol> <p>After amending the commit, continue the rebase process:</p> <p><code>bash    git rebase --continue</code></p> <p>If there are more commits to edit or resolve conflicts, Git will guide you through the process. Otherwise, the rebase will complete.</p> <ol> <li>Force Push the Changes:</li> </ol> <p>Since you've rewritten the commit history, you need to force-push the changes to your remote repository:</p> <p><code>bash    git push origin +HEAD</code></p>"},{"location":"Git/#summary","title":"Summary","text":"<p>In this step, you've used an interactive rebase to either remove or edit a specific commit. This is a powerful way to clean up your commit history, but it should be used carefully, especially when collaborating with others, as it rewrites the commit history.</p>"},{"location":"Git/#monitoring-the-latest-change-made-to-a-git-repository","title":"Monitoring the latest change made to a Git repository","text":"<p>To know the latest change made to a Git repository, you can use the following command in your terminal:</p> <pre><code>git log -1\n</code></pre> <p>This command shows the most recent commit, including:</p> <ul> <li>Commit hash</li> <li>Author</li> <li>Date</li> <li>Commit message</li> </ul>"},{"location":"Git/#example-output","title":"Example Output:","text":"<pre><code>commit 1a2b3c4d5e6f7g8h9i0j\nAuthor: Jane Doe &lt;jane@example.com&gt;\nDate:   Wed Apr 30 16:00:00 2025 +0200\n\n    Fix typo in README and update installation instructions\n</code></pre>"},{"location":"Git/#if-you-want-just-a-one-liner-summary","title":"If you want just a one-liner summary:","text":"<pre><code>git log -1 --oneline\n</code></pre>"},{"location":"Git/#to-see-which-files-were-changed-in-that-commit","title":"To see which files were changed in that commit:","text":"<pre><code>git show --name-only\n</code></pre> <p>Or to combine both into a more readable view:</p> <pre><code>git show --stat -1\n</code></pre>"},{"location":"Links/","title":"Links","text":""},{"location":"Links/#tooling","title":"Tooling","text":"<p>The operating system is a development environment.</p> <ul> <li>Minimal linux-based/FreeBSD/OpenBSD operating system</li> <li>A posix compliant shell (recommended), such as dash. Bash is good as well, albeit not stricly POSIX.</li> <li>C</li> <li>Make</li> <li>Git</li> <li>The UNIX core utilities</li> <li>tmux, mosh, vim, gdb, valgrind</li> </ul>"},{"location":"Links/#books-used","title":"Books used","text":"<ul> <li>The C Programming Language K&amp;R 2nd Edition</li> <li>Understanding and Using C pointers by Richard Reese</li> <li>Pointers on C, 1st Edition, by Kenneth Reek</li> <li>Practical C programming</li> <li>C in a nutshell</li> <li>21st Century C</li> <li>Mastering Algorithms With C</li> <li>Numerical Recipes In C The Art Of ... 2nd edition, W. Press, S. Teukolsky, W. Vetterling, B. Flannery</li> <li>Algorithms + Data Structure = Programs</li> <li>The missing semester</li> </ul>"},{"location":"Links/#helpful-external-resources","title":"Helpful External Resources","text":"<ul> <li>Command line environment</li> <li>Course of Systems Programming by Notre Dame University</li> <li>Great practical ideas in Computer Science by CMU</li> <li>The UNIX philosophy</li> <li>The FreeBSD manual</li> <li>The Gentoo Handbook</li> <li>The Archwiki</li> <li>Some great Book List</li> <li>Programming Concepts to know</li> <li>Teach yourself CS</li> <li>MATLAB examples</li> <li>Diagrams of all sorts (ER, flowchart, UML)</li> <li>Minimalist graphics library</li> <li>Thinkpad wiki</li> <li>CLI design guidelines</li> </ul>"},{"location":"Links/#the-unix-command-line-shell-scripting","title":"The UNIX command line (shell scripting)","text":"<ul> <li>Pure Shell Bible by Dylan Araps</li> <li>commandlinefu</li> <li>learning the shell</li> <li>Shell commands explained</li> <li>Terminals are sexy</li> <li>Various Linux tutorials</li> <li>cheat sheet shell</li> <li>cron jobs</li> <li>UNIX as IDE</li> </ul>"},{"location":"Links/#practice-regular-expressions","title":"Practice Regular Expressions","text":"<ul> <li>RegexGolf</li> <li>Regexone</li> <li>Regex101</li> <li>Regexr</li> </ul>"},{"location":"Links/#latex-and-markdown","title":"Latex and Markdown","text":"<ul> <li>Free latex editor (although worse than the Make and Vi approach)</li> <li>Latex web editor</li> <li>Latex tutorial</li> <li>Markdown tutorial</li> <li>Latex Notes</li> <li>Handwritten formula classification to Latex</li> <li>Math Editor for Latex</li> <li>Latex AMS</li> <li>Latex AMS: short guide</li> <li>Latex to images</li> </ul>"},{"location":"Links/#make","title":"Make","text":"<ul> <li>Makefile tutorial</li> <li>GNU Make documentation</li> <li>make</li> <li>Generic C Project template</li> <li>Simple Project Structure in C</li> <li>Simple Project Structure in Cpp</li> </ul>"},{"location":"Links/#git-and-mercurial","title":"Git and Mercurial","text":"<ul> <li>Mercurial short guide</li> <li>Git learning material</li> <li>Interactive Git learning</li> <li>Progit book</li> </ul>"},{"location":"Links/#competitive-programming","title":"Competitive Programming","text":"<ul> <li>Learn C++</li> <li>C++ book list</li> <li>FANG interview questions</li> <li>Competitive Programmer's handbook</li> <li>Nice quora question</li> <li>Competitive programming algorithms (cp-algorithms.com)</li> <li>Programming Challenges, Skiena</li> <li>National University of Singapore book on Competitive Programming </li> <li>Practice: cses.fi</li> <li>Practice: codewars.com</li> <li>Practice: adventofcode.com</li> <li>Practice: Codeforces</li> <li>Practice: Codeforces ladder</li> <li>Practice: Project Euler</li> <li>Practice: AtCoder</li> <li>CS 97SI: Introduction to Programming Contests</li> </ul>"},{"location":"Links/#project-based-learning","title":"Project based learning","text":"<ul> <li>From the Transistor by George Hotz</li> <li>Aggregator of project tutorials</li> <li>Projects list for beginners</li> <li>Projects from Scratch</li> <li>Build your own X</li> <li>Shell</li> <li>Text Editor</li> <li>Interpreter</li> <li>Compiler</li> <li>Compiler 2</li> <li>Build System</li> <li>Database</li> <li>Building a Web Browser</li> <li>Physically based rendering book (Computer Graphics)</li> <li>Emacs</li> <li>SQLbolt</li> </ul>"},{"location":"Links/#where-to-find-software","title":"Where to find software","text":"<ul> <li>Text Editors</li> <li>Suckless recommandations</li> <li>Good software according to cat-v.org</li> <li>Alternatives list</li> <li>Other list of recommandations</li> <li>Linux ricing guide</li> <li>Uses This</li> <li>Modern UNIX utilities</li> <li>\"The Book of Secret Knowledge\"</li> </ul>"},{"location":"Links/#java","title":"Java","text":"<ul> <li>Which Open JDK distribution to pick up?</li> <li>Recommended JDK distribution: Amazon Corretto 8</li> <li>Maven Documentation</li> <li>Quick Maven Tutorial</li> <li>Java 8 standard API documentation</li> <li>Java 8 tutorial</li> </ul>"},{"location":"Links/#licencing-software","title":"Licencing Software","text":"<ul> <li>Licencing a repository: GitHub</li> <li>Opensource licencing</li> <li>Choose a Licence</li> </ul>"},{"location":"MkDocs/","title":"MkDocs","text":"<p>For full documentation visit mkdocs.org. Look out for: mkdocs material.</p>"},{"location":"MkDocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"MkDocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"SSH_GPG/","title":"SSH and GPG","text":"<p>SSH is a protocol that used to connect to servers. GPG (gnu privacy guard) is an open source implementation of PGP.</p>"},{"location":"SSH_GPG/#ssh","title":"SSH","text":""},{"location":"SSH_GPG/#key-generation","title":"Key generation","text":"<p>In order to provide a public key, each user in your system must generate one. You should check to make sure you don\u2019t already have a key. By default, a user\u2019s SSH keys are stored in that user\u2019s ~/.ssh directory. You\u2019re looking for a pair of files named something like id_dsa or id_rsa and a matching file with a .pub extension. The .pub file is your public key, and the other file is your private key. If you don't have these, go to the $HOME dir and:</p> <pre><code>cd $HOME/.ssh\nls\nssh-keygen\n</code></pre> <p>It will ask you for a location with a name. You choose $(HOME)/.ssh/id_rsa. Click return 2 times.</p> <pre><code>ls\nid_rsa id_rsa.pub\n</code></pre> <p>So: id_rsa -&gt; private key, id_rsa.pub -&gt; public key. Never ever share the private key. When on Windows, use git bash. On a UNIX sys do this:</p> <pre><code>ssh -T git@github.com\n</code></pre> <p>Say yes, and then try to download a repo with SSH. If you have problems:</p> <ul> <li> <p>Testing your SSH connection</p> </li> <li> <p>Generating Multiple keys for different remote servers to connect to</p> </li> </ul>"},{"location":"SSH_GPG/#multiple-ssh-keys-for-different-servers","title":"Multiple SSH keys for different servers","text":"<p>You have 3 accounts in 3 hosting services. You need a key for each of those. This Method works also for n accounts. This guide is being taylored for Windows-based operating systems.</p>"},{"location":"SSH_GPG/#powershell-as-admin","title":"Powershell as Admin","text":"<p>In Windows PowerShell (run as admin):</p> <ul> <li>Check the current status of ssh-agent:</li> </ul> <pre><code>   Get-Service | ?{$_.Name -like '*ssh-agent*'} | select -Property Name, StartType, Status\n</code></pre> <ul> <li>Enable the Service if it is disabled:</li> </ul> <pre><code>   Set-Service -Name ssh-agent -StartupType Manual\n</code></pre> <ul> <li>Start the Service:</li> </ul> <pre><code>   Start-Service ssh-agent\n</code></pre> <ul> <li>Add your key as before:</li> </ul> <pre><code>   ssh-add &lt;path to the key&gt;\n</code></pre>"},{"location":"SSH_GPG/#create-ssh-keys-for-all-accounts","title":"Create SSH keys for all accounts","text":"<p>First make sure your current directory is your .ssh folder.</p> <pre><code>    cd ~/.ssh\n</code></pre> <p>Syntax for generating unique ssh key for ann account is:</p> <pre><code>     ssh-keygen -t rsa -C \"your-email-address\" -f \"github-username\"\n</code></pre> <p>here,</p> <p>-C stands for comment to help identify your ssh key</p> <p>-f stands for the file name where your ssh key get saved</p>"},{"location":"SSH_GPG/#now-generating-ssh-keys-for-my-two-accounts","title":"Now generating SSH keys for my two accounts","text":"<pre><code>     ssh-keygen -t rsa -C \"first_email@gmail.com\" -f \"github-first-account\"\n     ssh-keygen -t rsa -C \"second_email@gmail.com\" -f \"github-second-personal\"\n</code></pre> <p>Notice here first-account and second-account are the username of my github accounts corresponding to first-account@gmail.com and second-account@gmail.com email ids respectively.</p> <p>After entering the command the terminal will ask for passphrase, leave it empty and proceed.</p>"},{"location":"SSH_GPG/#add-ssh-keys-to-ssh-agent","title":"Add SSH keys to SSH Agent","text":"<p>Now we have the keys but it cannot be used until we add them to the SSH Agent. Note: the \"-k\" flag is lowercase on Windows and uppercase on UNIX shells (As it worked for me).</p> <pre><code>     ssh-add -k ~/.ssh/github-first-account\n     ssh-add -k ~/.ssh/github-second-account\n</code></pre> <p>You can read more about adding keys to SSH Agent here.</p>"},{"location":"SSH_GPG/#add-ssh-public-key-to-the-github","title":"Add SSH public key to the Github","text":"<p>For the next step we need to add our public key (that we have generated in our previous step) and add it to corresponding github accounts.</p> <p>For doing this we need to:</p> <ul> <li>Copy the public key to the clipboard</li> </ul> <p>We can copy the public key by opening the github-rahul-office.pub file in nvim and then copying the content of it.</p> <pre><code>     nvim ~/.ssh/github-first-account.pub\n     nvim ~/.ssh/github-second-account.pub\n</code></pre> <p>And then, paste the public key on Github.</p> <ol> <li> <p>Sign in to Github Account</p> </li> <li> <p>Go to Settings &gt; SSH and GPG keys &gt; New SSH Key</p> </li> <li> <p>Paste your copied public key and give it a Title of your choice.</p> </li> </ol>"},{"location":"SSH_GPG/#create-a-config-file-and-make-host-entries","title":"Create a Config File and Make Host Entries","text":"<p>The ~/.ssh/config file allows us specify many config options for SSH.</p> <p>If config file not already exists then create one (make sure you are in ~/.ssh directory)</p> <pre><code>     touch config\n</code></pre> <p>The commands below opens config in your default editor....Likely TextEdit, VS Code.</p> <pre><code>     open config\n</code></pre> <p>Now we need to add these lines to the file, each block corresponding to each account we created earlier.</p> <pre><code>     #first-account\n     Host github.com-first-account\n          HostName github.com\n          User git\n          IdentityFile ~/.ssh/github-first-account\n\n     #second-account\n     Host github.com-second-account\n          HostName github.com\n          User git\n          IdentityFile ~/.ssh/github-second-account\n</code></pre>"},{"location":"SSH_GPG/#handling-git","title":"Handling Git","text":"<p>From now on, to ensure that our commits and pushes from each repository on the system uses the correct GitHub user \u2014 we will have to configure user.email and user.name in every repository freshly cloned or existing before.</p> <p>To do this use the following commands.</p> <pre><code>     git config user.email \"first-account@gmail.com\"\n     git config user.name \"first-account Name\"\n\n     git config user.email \"second-account@gmail.com\"\n     git config user.name \"second-account Name\"\n</code></pre> <p>Pick the correct pair for your repository accordingly.</p> <p>To push or pull to the correct account we need to add the remote origin to the project</p> <pre><code>     git remote add origin git@github.com-first-account:first-account\n\n     git remote add origin git@github.com-second-account:second-account\n</code></pre> <p>Now you can use:</p> <pre><code>     git push\n\n     git pull\n</code></pre>"},{"location":"SSH_GPG/#references","title":"References","text":"<ul> <li>(1)</li> <li>(2)</li> <li>(3) [SSH tunnels]</li> </ul>"},{"location":"SSH_GPG/#gpg-gnu-privacy-guard","title":"GPG (GNU privacy guard)","text":"<p>First off, we need to generate a key pair. A key pair is composed by a private key and a public key.</p> <pre><code>gpg --full-gen-key\n</code></pre> <p>It will generate a file, usually, in the $(HOME)/.gnupg directory.</p>"},{"location":"SysAdmin/Arch/","title":"Arch linux","text":"<p>References:</p> <ul> <li>Gentoo AMD 64 handbook</li> <li>Archwiki</li> </ul> <p>The best guide to follow is the Archwiki, as it is always up to date. This guide, however, will give more explanations throughout the process, by spending more words for each step.</p>"},{"location":"SysAdmin/Arch/#setting-the-keymap","title":"Setting the keymap","text":"<p>When in \"root@archiso\", list all of the available keymaps:</p> <pre><code>ls /usr/share/kbd/keymaps/**/*.map.gz\n</code></pre> <p>loadkeys: it-latin1</p>"},{"location":"SysAdmin/Arch/#internet-through-the-smartphone-tethering","title":"Internet through the Smartphone tethering","text":"<ul> <li>Setting up the internet</li> </ul> <p>We enter the deamon called \"iwd\" which then appears as a prompt where we input commands</p> <pre><code>iwctl\n</code></pre> <p>This command prompts out the list of wi-fi devices through which we can connect to a given network</p> <pre><code>device list\n</code></pre> <p>Let's call the device that we're using \"wlan0\", SSID is the name of the chosen network we want to connect, it then asks for a passphrase. More details about this on this link.</p> <pre><code>station wlan0 scan\nstation wlan0 get-networks\n# SSID is the name of the Wi-Fi\nstation wlan0 connect SSID\n</code></pre>"},{"location":"SysAdmin/Arch/#checking-network-connection","title":"Checking Network connection","text":"<p>After connecting, type \"exit\" while on the iwd daemon to quit the program, then, as root user, type the following to check out if the connection was successful.</p> <pre><code>ping google.com\n</code></pre>"},{"location":"SysAdmin/Arch/#making-sure-our-system-clock-is-accurate","title":"Making sure our system clock is accurate","text":"<pre><code>timedatectl set-ntp true\n</code></pre> <pre><code>timedatectl set-timezone Europe/Rome\n</code></pre> <p>Verify it with</p> <pre><code>timedatectl status\n</code></pre>"},{"location":"SysAdmin/Arch/#disk-partitioning-with-fdisk","title":"Disk partitioning with fdisk","text":"<p>/dev/sda is the name of the drive we want to partition, where it will be mounted the various parts of the system, among which \"/mnt\", where the OS will be mounted.</p> <pre><code>fdisk -l # listing all of our drives\nfdisk /dev/sda #the name of the Disk where I want to install Arch\n</code></pre> <p>Creating a new Label</p> <pre><code>g # to create a GPT partition table, for EFI\n</code></pre>"},{"location":"SysAdmin/Arch/#using-fdisk-to-create-three-partitions","title":"Using fdisk to create three partitions","text":""},{"location":"SysAdmin/Arch/#partitioning-the-efi-system-the-modern-bios-substitute","title":"Partitioning the EFI system (the modern BIOS substitute)","text":"<pre><code>n\n# input number \"1\"\n# press the enter key (default 2048)\n+550M # megabytes for the EFI partition # Don't input \"n\" again, there's a question .. answer \"yes\"\n</code></pre>"},{"location":"SysAdmin/Arch/#swap-partition","title":"Swap partition","text":"<pre><code>n\n2\n# enter (default 2048)\n+2G # two gigabytes for the swap partition\n</code></pre>"},{"location":"SysAdmin/Arch/#linux-file-system-partition","title":"Linux file system partition","text":"<pre><code>n\n3\n# enter (dafault 2048)\n# enter allocates the remaining storage for the linux file system\n</code></pre>"},{"location":"SysAdmin/Arch/#if-any-mistakes-are-being-made","title":"If any mistakes are being made","text":"<p>Se sbaglio ad assegnare il tipo di partizione delle prime due, posso sempre premere t e il numero della partizione alla quale devo cambiare il tipo:</p> <p>example:</p> <pre><code>t\n1\nL # listing available partitions\n1 # for EFI system\ne # change from linux file system to an EFI System\n</code></pre> <p>t 2 L per listare i tipi di partizione disponibili 19 per Linux swap e cambia da linux file system a Linux swap</p> <p>Alla fine premi w per scrivere sul disco le nostre impostazioni</p>"},{"location":"SysAdmin/Arch/#file-system","title":"File System","text":"<p>Now we need to create the different types of File System respectively for each partition we have created:</p> <p>Creating the file system Fat 32 in sda1</p> <pre><code>mkfs.fat -F32 /dev/sda1\n</code></pre> <p>Create the SWAP partition in sda2</p> <pre><code>mkswap /dev/sda2\n</code></pre> <p>Activate the SWAP partition</p> <pre><code>swapon /dev/sda2\n</code></pre> <p>Creating the File System in sda3</p> <pre><code>mkfs.ext4 /dev/sda3\n</code></pre> <p>Mount the file system</p> <pre><code>mount /dev/sda3 /mnt\n</code></pre> <p>Installing the base system with pacstrap</p> <pre><code>pacstrap /mnt base linux linux-firmware\n</code></pre>"},{"location":"SysAdmin/Arch/#generating-system-tabular-file-fstab-which-gives-infos-on-our-partitioning","title":"Generating system tabular file fstab which gives infos on our partitioning:","text":"<pre><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab\n</code></pre> <p>Now we become root of our installation, that is, we move from the pendrive to the /dev/sda3 partition: arch-chroot /mnt</p> <p>Now the prompt should be changed, because we are in our base operating system in our /dev/sda3 partition inside our file system</p>"},{"location":"SysAdmin/Arch/#locale","title":"Locale","text":"<p>Setting the time-zone</p> <pre><code>ln -sf /usr/share/zoneinfo/Europe/Rome /etc/localtime\n</code></pre> <p>If I had to list them all</p> <pre><code>ls /usr/share/zoneinfo\n</code></pre> <p>System clock settings:</p> <pre><code>hwclock --systohc\n</code></pre>"},{"location":"SysAdmin/Arch/#install-neovim","title":"Install neovim","text":"<pre><code>pacman -Sy neovim\n</code></pre>"},{"location":"SysAdmin/Arch/#install-iwd","title":"Install iwd","text":"<pre><code>pacman -Sy iwd\n</code></pre>"},{"location":"SysAdmin/Arch/#setting-up-the-locale","title":"Setting up the Locale","text":"<pre><code>vim /etc/locale.gen\nen_US.UTF-8 UTF-8\n</code></pre> <p>Now activate the locale.gen </p> <pre><code>locale-gen\n</code></pre> <p>Creating a config file on /etc/hostname</p> <pre><code>nvim /etc/hostname\n# I could write, for example:\nt440p\n</code></pre>"},{"location":"SysAdmin/Arch/#modifichiamo-il-file-hosts","title":"Modifichiamo il file hosts","text":"<pre><code>nvim /etc/hosts\n  ```\n\nAnd I write on it the following..\n\n```shell\n127.0.0.1 localhost\n::1 localhost\n127.0.1.1 t440p.localdomain t440p\n</code></pre>"},{"location":"SysAdmin/Arch/#creating-the-users-with-their-relative-passwords","title":"Creating the Users with their relative passwords","text":"<p>The default user is the root user. To create other users Now I have to create several users and a password, otherwise there will be only 1 user, namely the root For the root password, just passwd without any command line parameters: passwd 3394 For the user: useradd -m angelo I create user password: passwd angelo 3394</p> <p>On Unix there are various groups that users can join. usermod is the command in question. I add the user angelo to the following groups: usermod -aG wheel,audio,video,optical,storage angelo I edit the sudoers file where sudo assigns privileges, and I want to give the user angelo the privilege to use sudo: visudo I remove the comment from:</p> <pre><code># %wheel ALL=(ALL) ALL // Da rivedere bene ..\n</code></pre>"},{"location":"SysAdmin/Arch/#install-sudo","title":"Install sudo","text":"<pre><code>pacman -S sudo\n</code></pre>"},{"location":"SysAdmin/Arch/#install-grub","title":"Install grub","text":"<pre><code>pacman -S grub\n</code></pre>"},{"location":"SysAdmin/Arch/#installing-other-useful-packages","title":"Installing other useful packages","text":"<pre><code>pacman -S efibootmgr dosfstools os-prober mtools\n</code></pre>"},{"location":"SysAdmin/Arch/#mounting-the-efi-partition","title":"Mounting the EFI partition","text":"<p>mkdir /boot/EFI mount /dev/sda1 /boot/EFI This doesn't work (don't know why): grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck</p> <p>Heads up for those with MSI boards, apparently for some MSI bios versions it doesn't  recognize the standard grub installation path so it would boot to the bios, bypassing grub completely.  Luckily it's a simple fix you have to add --removable so the right command be  \"grub-install --target=x86_64-efi --removeable --bootloader-id=grub_uefi --recheck\".  Credit goes to Ryan in the comments of the Open  Source Home's tutorial of how to install arch that video is also here on Youtube. This works: grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot/EFI --removable</p> <p>Create the GRUB config file: grub-mkconfig -o /boot/grub/grub.cfg</p> <p>Install iwd onto the machine before leaving the live installation process https://bbs.archlinux.org/viewtopic.php?id=187798</p> <p>Install network manager: pacman -S networkmanager vim xorg</p> <p>Enable networkmanager with systemd: systemctl enable NetworkManager systemctl enable iwd</p> <p>exit the chroot exit</p> <p>Unmount umount -l /mnt</p> <p>Now there's to endings to this: 1. <code>reboot</code> if running on bare metal</p> <ol> <li><code>shutdown now</code> if running on a VM</li> </ol>"},{"location":"SysAdmin/Arch/#linux-drive-and-partition-config","title":"Linux Drive and Partition Config","text":"<p>add, fdisk, resize2fs, lsblk, tune2fs and more sed, awk, grep, cat, gpg, ssh, git, make, zsh</p>"},{"location":"SysAdmin/Cloud/","title":"Connecting to a GPU cluster: a walkthrough","text":"<p>Connecting to a GPU cluster to perform calculations is becoming an everyday task we all have to measure ourselves with. It is important to understand how to \"ssh into a remote server\" to perform computations, and, in the context of Deep Learning, we are expected to run the experiments using CUDA or python3, perhaps with the aid of an interface that a jupyter notebook, other than the terminal.</p>"},{"location":"SysAdmin/Cloud/#the-key-that-well-use-to-connect-to-the-server","title":"The key that we'll use to connect to the server","text":"<p>When we want to connect to a remote supercomputer we are being issued a key. This key is a file with the extension \".pem\". Let's suppose we download, from the website of the cloud provider, this file onto the ~/Downloads directory. We have the following workflow:</p> <pre><code>chmod 600 ~/Downloads/test-key-gpu.pem\n</code></pre> <p>which does the following:</p> <ul> <li><code>chmod 600</code>: This changes the file permissions for <code>test-key-gpu.pem</code>. Specifically, it sets the file to be readable and writable by the owner (you) and removes all permissions for anyone else. The numeric mode <code>600</code> is broken down as follows:</li> <li>The first digit (<code>6</code>) means the owner can read and write the file (<code>4 + 2 = 6</code>).</li> <li> <p>The other two digits (<code>0 0</code>) mean that no other users (group or others) have any permissions.</p> </li> <li> <p><code>~/Downloads/test-key-gpu.pem</code>: This is the path to the private SSH key file (used to authenticate your SSH connection) that you've likely downloaded to access the cloud GPU instance. The <code>~</code> represents your home directory, so this file is stored in your <code>Downloads</code> folder.</p> </li> </ul> <p>(Optional) You can copy the private key to your <code>.ssh</code> directory with the following command:</p> <pre><code>cp ~/Downloads/test-key-gpu.pem ~/.ssh\n</code></pre>"},{"location":"SysAdmin/Cloud/#connecting-to-the-remote-cluster","title":"Connecting to the remote cluster","text":"<p>The command to do so is: <code>ssh -i ~/Downloads/test-key-gpu.pem ubuntu@96.76.203.50</code></p> <ul> <li> <p><code>-i ~/Downloads/test-key-gpu.pem</code>: This flag specifies the identity file (private key) for SSH to use for authentication. In this case, <code>~/Downloads/test-key-gpu.pem</code> is the file path to the private key, stored in your <code>Downloads</code> folder.</p> </li> <li> <p><code>ubuntu@96.76.203.50</code>:</p> </li> <li><code>ubuntu</code>: The username to log into the remote server. It is common for cloud instances running Ubuntu to default to the <code>ubuntu</code> user.</li> <li><code>96.76.203.50</code>: This is the IP address of the remote server (likely your cloud GPU instance).</li> </ul>"},{"location":"SysAdmin/Cloud/#what-happens-next","title":"What happens next?","text":"<p>This command connects you to the remote cloud GPU instance using SSH, authenticating with the private key specified, and logs you in as the <code>ubuntu</code> user. </p> <p>Once connected, the terminal prompt will change, indicating you are now controlling the remote server. At this point, you might want to use <code>tmux</code> (for terminal multiplexing) and <code>nvim</code> (for code editing). For example, you could split your <code>tmux</code> session into three panes\u2014one to monitor GPU usage with <code>nvidia-smi</code>, another for system monitoring with <code>htop</code>, and a third for running Python.</p>"},{"location":"SysAdmin/Cloud/#copying-files-between-local-machine-and-cloud-instance","title":"Copying Files Between Local Machine and Cloud Instance:","text":""},{"location":"SysAdmin/Cloud/#copying-from-remote-to-local","title":"Copying from Remote to Local:","text":"<p>To copy a file (<code>foo.py</code>) from the remote server to your local machine, use:</p> <pre><code>scp -i ~/Downloads/test-key-gpu.pem ubuntu@96.76.203.50:~/foo.py .\n</code></pre> <ul> <li><code>scp</code>: This command securely transfers files over SSH.</li> <li><code>-i ~/Downloads/test-key-gpu.pem</code>: Specifies the identity file (private key) for authentication.</li> <li><code>ubuntu@96.76.203.50:~/foo.py</code>: The remote user (<code>ubuntu</code>), the server (<code>96.76.203.50</code>), and the file path (<code>~/foo.py</code>) you want to copy from.</li> <li><code>.</code> (dot): This specifies the current directory on your local machine as the destination.</li> </ul>"},{"location":"SysAdmin/Cloud/#copying-from-local-to-remote","title":"Copying from Local to Remote:","text":"<p>To upload a file (<code>random.txt</code>) from your local machine to the remote instance:</p> <pre><code>scp -i ~/Downloads/test-key-gpu.pem random.txt ubuntu@96.76.203.50:~/\n</code></pre> <p>This copies the file <code>random.txt</code> to the home directory of the <code>ubuntu</code> user on the remote instance.</p>"},{"location":"SysAdmin/Cloud/#checking-on-the-nvidia-system","title":"Checking on the nvidia system:","text":"<p>To verify that CUDA has been installed successfully, run the following command:</p> <pre><code>nvcc --version\n</code></pre> <p>This should display the installed CUDA version. You can also check if the driver is working correctly with:</p> <pre><code>nvidia-smi\n</code></pre> <p>You can also install CUDA samples to verify that everything is working correctly.  The samples can be found in the CUDA installation directory:</p> <pre><code>cd /usr/local/cuda/samples\nsudo make\n</code></pre>"},{"location":"SysAdmin/Cloud/#monitoring-python-processes","title":"Monitoring Python Processes:","text":"<p>It is important to monitor python processes in the remote machine. To check for running Python processes on the remote server, you can use:</p> <pre><code>ps ax | grep python3\n</code></pre> <p>This will show any running instances of <code>python3</code>. To terminate a process, use:</p> <pre><code>kill -9 &lt;process_id&gt;\n</code></pre> <p>Replace <code>&lt;process_id&gt;</code> with the actual ID of the Python process you want to kill. Note that  is discoverable through htop, or some other top-like program."},{"location":"SysAdmin/Cloud/#running-a-jupyter-notebook-on-the-cloud","title":"Running a Jupyter Notebook on the Cloud:","text":"<p>You can set up a Python virtual environment and run a Jupyter Notebook on your cloud GPU instance:</p> <ol> <li> <p>Create a virtual environment:    <code>bash    python3 -m venv jpr</code></p> </li> <li> <p>Install Jupyter and TensorFlow (or PyTorch):    <code>bash    pip install jupyter    pip install tensorflow-gpu  # For TensorFlow    # or    pip install torch  # For PyTorch</code></p> </li> <li> <p>If needed, uninstall packages:    <code>bash    pip uninstall tensorflow-gpu</code></p> </li> <li> <p>Check your CUDA version:    <code>bash    nvcc --version</code></p> </li> </ol> <p>If your CUDA version is 9.0, you may need to install a specific version of TensorFlow:    <code>bash    pip install tensorflow-gpu==1.12.0</code></p> <ol> <li>Run Jupyter Notebook, setting the IP to <code>0.0.0.0</code> so it can be accessed over the network:    <code>bash    jupyter notebook --ip=0.0.0.0</code></li> </ol>"},{"location":"SysAdmin/Cloud/#terminating-the-instance","title":"Terminating the Instance:","text":"<p>Terminating a cloud instance will result in a complete loss of all data on the instance. This is typically done through the cloud provider\u2019s web interface. However, you should terminate the active SSH connection from your local machine by simply typing:</p> <pre><code>exit\n</code></pre> <p>or by closing the terminal.</p>"},{"location":"SysAdmin/Starter/","title":"Starting Shell Programming","text":"<p>Learning how to use sed, awk, grep, cat, fdisk and more</p>"},{"location":"SysAdmin/Starter/#tools-needed","title":"Tools needed","text":"<ul> <li>Shell: zsh, bash, ash, dash</li> <li>Any TUI text editor (Vim, Emacs, Nano ..)</li> <li>Any terminal emulator</li> </ul>"},{"location":"SysAdmin/Starter/#adding-to-path-any-folder-of-executable-scripts","title":"Adding to $PATH any folder of executable scripts","text":"<p>Open your \".zshrc\" or \".bashrc\". Ideally these two files are located in your ~/ folder. To add the folder named \"bin\" to the $PATH variable, just add the following to your configuration file</p> <pre><code>export PATH=\"$PATH:/home/username/bin\"\n</code></pre> <p>Now you can write your scripts in python, shell or other languages, making them executable and add the folder where these scripts are located to your $PATH environment variable to use them everywhere while browsing your filesystem with the shell</p> <p>If you have a script that launches a specific application, you can use symlinking and adding to $PATH to launch that application from anywhere in your file system</p> <pre><code>ln -s /home/username/programs/java/eclipse/eclipse /home/username/bin\n</code></pre>"},{"location":"SysAdmin/Starter/#getting-the-size-of-a-directory-on-the-command-line","title":"Getting the size of a directory on the command line","text":"<pre><code>du -s, --summarize\n        # display only a total for each argument\n\ndu -h, --human-readable\n        # print sizes in human readable format (e.g., 1K 234M 2G)\n\ndu -hs\n</code></pre> <p>Adding a directory to the PATH environment variable in Linux is a useful way to ensure that the executables in that directory can be run from any location in the command line without specifying the full path. Here\u2019s how to add a directory to your PATH in a few steps:</p>"},{"location":"SysAdmin/Starter/#temporary-addition","title":"Temporary Addition","text":"<p>If you want to add a directory to the PATH temporarily, meaning it will only last for the duration of the session or terminal window, you can use the following command in the terminal:</p> <pre><code>export PATH=$PATH:/path/to/directory\n</code></pre> <p>Replace <code>/path/to/directory</code> with the actual path of the directory you want to add. This change will last until the terminal is closed.</p>"},{"location":"SysAdmin/Starter/#permanent-addition","title":"Permanent Addition","text":"<p>To make the addition permanent, you will need to add the export command to a startup file like <code>.bashrc</code>, <code>.bash_profile</code>, or <code>.profile</code>, depending on the shell and setup you are using.</p> <ol> <li>Open your terminal.</li> <li>Edit the startup file:</li> <li>If you are using Bash, you can add the directory to your PATH in your <code>.bashrc</code> or <code>.bash_profile</code> file. Open the file with a text editor, such as nano:      <code>bash      nano ~/.bashrc</code></li> <li> <p>For other shells, like Zsh, you might edit <code>.zshrc</code>.</p> </li> <li> <p>Add the export command to the end of the file:    <code>bash    export PATH=$PATH:/path/to/directory</code>    Again, replace <code>/path/to/directory</code> with your specific directory.</p> </li> <li> <p>Save and close the file. For nano, press <code>Ctrl + X</code>, then <code>Y</code> to confirm, and <code>Enter</code> to save.</p> </li> <li> <p>Source the file to apply the changes immediately without needing to restart your terminal:    <code>bash    source ~/.bashrc</code>    Replace <code>.bashrc</code> with the name of the file you edited, if different.</p> </li> </ol>"},{"location":"SysAdmin/Starter/#verify-the-change","title":"Verify the Change","text":"<p>After adding the directory to your PATH, you can verify that it was added successfully by typing:</p> <pre><code>echo $PATH\n</code></pre> <p>This command will display the contents of your PATH variable, and you should see your directory listed there.</p> <p>Adding directories to the PATH is a common practice for simplifying command executions and script runs, especially for custom scripts or software installed in non-standard locations.</p> <p>The decision to install binaries in <code>/usr/bin</code> or <code>~/.local/bin</code> depends on several factors, including user permissions, system scope, and organizational practices. Here's a detailed comparison to help you make an informed choice:</p>"},{"location":"SysAdmin/Starter/#installing-binaries-in-usrbin","title":"Installing Binaries in <code>/usr/bin</code>","text":"<p>Pros: 1. System-Wide Availability: Binaries installed in <code>/usr/bin</code> are accessible to all users on the system, making them ideal for software that needs to be available system-wide. 2. Standard Practice: It's a conventional location for executable binaries, ensuring consistency with many installation scripts and package managers. 3. Path Inclusion: By default, <code>/usr/bin</code> is included in the system PATH, meaning users can run these binaries without modifying their environment.</p> <p>Cons: 1. Requires Root Privileges: Installing binaries in <code>/usr/bin</code> typically requires root or superuser privileges, which might not be desirable or possible in all situations. 2. Risk of Overwriting: There's a risk of overwriting existing binaries, leading to potential conflicts or system issues.</p>"},{"location":"SysAdmin/Starter/#installing-binaries-in-localbin","title":"Installing Binaries in <code>~/.local/bin</code>","text":"<p>Pros: 1. User-Specific Installation: Binaries installed in <code>~/.local/bin</code> are only accessible to the user who installed them, providing a personalized environment without affecting other users. 2. No Root Required: Installation in this directory does not require root privileges, making it a safer and more accessible option for users without administrative access. 3. Conflict Avoidance: Reduces the risk of overwriting system binaries and minimizes potential conflicts.</p> <p>Cons: 1. Manual PATH Management: You might need to manually add <code>~/.local/bin</code> to your PATH if it\u2019s not already included. This can be done by adding a line to your shell configuration file (e.g., <code>.bashrc</code>, <code>.zshrc</code>):</p> <p><code>sh    export PATH=\"$HOME/.local/bin:$PATH\"</code></p> <ol> <li>User-Specific: Binaries are not available system-wide, which might be a limitation if you want other users to have access to the same tools.</li> </ol>"},{"location":"SysAdmin/Starter/#recommendations","title":"Recommendations","text":"<ul> <li> <p>For Personal Use and Development: If you are installing binaries for personal use or development purposes, <code>~/.local/bin</code> is generally the better choice. It avoids the need for root privileges and ensures you don\u2019t interfere with system-wide binaries.</p> </li> <li> <p>For System-Wide Tools: If the binaries need to be available to all users or are part of system-wide software, <code>/usr/bin</code> is more appropriate, provided you have the necessary administrative rights and are cautious about potential conflicts.</p> </li> </ul>"},{"location":"SysAdmin/Starter/#practical-example","title":"Practical Example:","text":"<p>Suppose you're installing a custom script or tool you've developed. If it's just for your use, you would:</p> <ol> <li>Place the binary in <code>~/.local/bin</code>:    <code>sh    cp my_script ~/.local/bin/</code></li> <li>Ensure <code>~/.local/bin</code> is in your PATH (if not already):    <code>sh    echo 'export PATH=\"$HOME/.local/bin:$PATH\"' &gt;&gt; ~/.bashrc    source ~/.bashrc</code></li> </ol> <p>For system-wide tools, you would: 1. Use root privileges to place the binary in <code>/usr/bin</code>:    <code>sh    sudo cp my_tool /usr/bin/</code></p>"},{"location":"SysAdmin/Starter/#conclusion","title":"Conclusion","text":"<p>Choose <code>~/.local/bin</code> for user-specific installations and <code>/usr/bin</code> for system-wide installations, taking into account permissions, scope, and potential conflicts. This approach ensures flexibility and maintains system integrity.</p>"},{"location":"SysAdmin/Starter/#my-practice","title":"My practice","text":"<p>Compiling binaries in a personal directory (like <code>~/bin</code>) and then creating symlinks in system-wide or user-specific directories is indeed a good practice and is commonly followed by experienced users. This approach offers several advantages:</p>"},{"location":"SysAdmin/Starter/#advantages-of-compiling-in-bin-and-creating-symlinks","title":"Advantages of Compiling in <code>~/bin</code> and Creating Symlinks","text":"<ol> <li>Organization: Keeps your compiled binaries organized and separate from system-wide binaries, reducing clutter and potential conflicts.</li> <li>Safety: Avoids the risk of overwriting system binaries or binaries managed by package managers.</li> <li>Flexibility: Makes it easy to update or remove binaries without affecting system directories. You can manage your compiled binaries independently.</li> <li>Ease of Management: Simplifies the process of maintaining and upgrading software. You can simply replace the binary in <code>~/bin</code> and the symlink remains unchanged.</li> </ol>"},{"location":"SysAdmin/Starter/#steps-to-follow","title":"Steps to Follow","text":""},{"location":"SysAdmin/Starter/#1-compile-the-binary","title":"1. Compile the Binary","text":"<p>First, download and compile the software in your personal directory, such as <code>~/bin</code>:</p> <pre><code>cd ~/bin\ngit clone https://github.com/your/repository.git\ncd repository\nmake\n# or the appropriate build command (e.g., cmake, ./configure &amp;&amp; make, etc.)\n</code></pre>"},{"location":"SysAdmin/Starter/#2-create-a-symlink-in-usrbin-or-localbin","title":"2. Create a Symlink in <code>/usr/bin</code> or <code>~/.local/bin</code>","text":"<p>After compiling the binary, create a symlink in either <code>/usr/bin</code> (for system-wide access) or <code>~/.local/bin</code> (for user-specific access):</p> <ul> <li>For System-Wide Access:</li> </ul> <p><code>sh   sudo ln -s ~/bin/repository/compiled_binary /usr/bin/compiled_binary</code></p> <ul> <li>For User-Specific Access:</li> </ul> <p><code>sh   ln -s ~/bin/repository/compiled_binary ~/.local/bin/compiled_binary</code></p>"},{"location":"SysAdmin/Starter/#example","title":"Example","text":"<p>Let's take the example of compiling and installing Neovim:</p> <ol> <li>Compile Neovim:</li> </ol> <p><code>sh    cd ~/bin    git clone https://github.com/neovim/neovim.git    cd neovim    make CMAKE_BUILD_TYPE=Release</code></p> <ol> <li> <p>Create a Symlink:</p> </li> <li> <p>For System-Wide Access:</p> <p><code>sh  sudo ln -s ~/bin/neovim/build/bin/nvim /usr/bin/nvim</code></p> </li> <li> <p>For User-Specific Access:</p> <p><code>sh  ln -s ~/bin/neovim/build/bin/nvim ~/.local/bin/nvim</code></p> </li> </ol>"},{"location":"SysAdmin/Starter/#best-practices","title":"Best Practices","text":"<ul> <li>Permissions Management: Ensure that your personal directory (<code>~/bin</code>) has the appropriate permissions to avoid unauthorized access.</li> <li>PATH Configuration: Make sure that <code>~/.local/bin</code> is included in your PATH. This is typically done by adding the following line to your shell configuration file (e.g., <code>.bashrc</code>, <code>.zshrc</code>):</li> </ul> <p><code>sh   export PATH=\"$HOME/.local/bin:$PATH\"</code></p> <ul> <li>Version Management: If you need to manage multiple versions of the same software, use versioned directories and symlinks to switch between them easily.</li> </ul>"},{"location":"SysAdmin/Starter/#conclusion_1","title":"Conclusion","text":"<p>Compiling software in <code>~/bin</code> and creating symlinks in <code>/usr/bin</code> or <code>~/.local/bin</code> is a well-regarded practice among expert users. It provides a clean, flexible, and safe way to manage custom-compiled binaries without interfering with system directories or package-managed files. This method enhances maintainability and minimizes the risk of conflicts.</p>"},{"location":"SysAdmin/Starter/#installing-deb-packages-on-debian-based-systems-with-dpkg-i","title":"Installing <code>.deb</code> packages on debian-based systems with <code>dpkg -i</code>","text":"<p>To install a <code>.deb</code> package on a Linux system, you'll typically use the <code>dpkg</code> command. Here\u2019s a step-by-step guide:</p> <ol> <li> <p>Open a Terminal: You can usually open the terminal from your applications menu or by pressing <code>Ctrl + Alt + T</code>.</p> </li> <li> <p>Navigate to the Directory Containing the <code>.deb</code> File: Use the <code>cd</code> command to change to the directory where your <code>.deb</code> file is located. For example, if it's in your <code>Downloads</code> folder, you would type:    <code>bash    cd ~/Downloads</code></p> </li> <li> <p>Install the Package with <code>dpkg</code>: Use the <code>dpkg -i</code> command followed by the package name to install it. Replace <code>package_name.deb</code> with the actual name of your file:    <code>bash    sudo dpkg -i package_name.deb</code>    You need to use <code>sudo</code> to gain the necessary permissions to install software.</p> </li> <li> <p>Resolve Dependencies: Sometimes, a <code>.deb</code> file might require other packages that are not currently installed on your system. If <code>dpkg</code> reports missing dependencies, you can ask the package manager to fix these issues by running:    <code>bash    sudo apt-get install -f</code>    This command will install any missing dependencies and complete the setup of your <code>.deb</code> package.</p> </li> </ol> <p>These steps should help you install most <code>.deb</code> files on your Linux system. If you encounter specific errors during the installation, they usually provide hints on what's wrong and how to fix it.</p>"},{"location":"SysAdmin/Tools/","title":"Tools","text":""},{"location":"SysAdmin/Tools/#pandoc","title":"Pandoc","text":""},{"location":"SysAdmin/Tools/#1-install-pandoc","title":"1. Install Pandoc:","text":"<p>Make sure you have Pandoc installed on your system. You can download it from the official website: Pandoc Installation.</p>"},{"location":"SysAdmin/Tools/#2-convert-docx-to-plain-text","title":"2. Convert .docx to Plain Text:","text":"<p>Use the following command to convert your .docx file to plain text (e.g., Markdown):</p> <pre><code>pandoc input.docx -o output.md\n</code></pre> <p>Replace \"input.docx\" with the name of your input file and \"output.md\" with the desired name for the plain text file. You can use Markdown as it is a plain text format that can be easily edited.</p>"},{"location":"SysAdmin/Tools/#3-edit-the-plain-text-file","title":"3. Edit the Plain Text File:","text":"<p>Open the generated plain text file with a text editor of your choice, make the necessary modifications, and save the changes.</p>"},{"location":"SysAdmin/Tools/#4-convert-plain-text-back-to-docx","title":"4. Convert Plain Text Back to .docx:","text":"<p>Once you've made your edits, use the following command to convert the modified plain text file back to .docx:</p> <pre><code>pandoc input.md -o output.docx\n</code></pre> <p>Replace \"input.md\" with the name of your modified plain text file and \"output.docx\" with the desired name for the final .docx file.</p>"},{"location":"SysAdmin/Tools/#note","title":"Note:","text":"<ul> <li>Pandoc may not perfectly preserve all formatting details of complex .docx files, especially if they contain advanced features. Simple documents generally convert more successfully.</li> <li>Depending on your editing needs, you might want to choose a plain text format that best suits your document structure and content.</li> </ul> <p>Please check the Pandoc documentation for any updates or changes in command options beyond my last knowledge update in January 2022. If there are new features or improvements, you may find them in the latest documentation or release notes on the Pandoc website.</p> <ol> <li> <p>Prepare the RTF File: Make sure your RTF file is accessible and that you know the path to the file.</p> </li> <li> <p>Open a Command Line Interface: This could be Command Prompt on Windows, Terminal on macOS, or any terminal emulator on Linux.</p> </li> <li> <p>Use the Pandoc Command: To convert the RTF file to Markdown, use the following command in the terminal:    <code>bash    pandoc -s yourfile.rtf -o outputfile.md</code>    Here, replace <code>yourfile.rtf</code> with the path to your RTF file, and <code>outputfile.md</code> with the desired output Markdown file name.</p> </li> <li> <p>Check the Output: After running the command, check the output Markdown file to ensure the conversion went as expected. Depending on the complexity and features used in your RTF file, you might need to make minor manual adjustments to the Markdown file.</p> </li> </ol> <p>Pandoc does a commendable job of converting between file formats, but it's worth noting that some formatting may not be perfectly translated due to differences in how formats handle styles and structures. This is particularly true with rich text formats like RTF, which can include a variety of formatting and embedded objects.</p> <p><code>rtorrent</code> is a command-line based BitTorrent client for Unix-like operating systems. It is designed to be lightweight and efficient. Here are some basic steps to use <code>rtorrent</code>:</p>"},{"location":"SysAdmin/Tools/#installation","title":"Installation:","text":"<p>First, make sure you have <code>rtorrent</code> installed on your system. You can install it using your package manager. For example, on Debian-based systems:</p> <pre><code>sudo apt-get update\nsudo apt-get install rtorrent\n</code></pre>"},{"location":"SysAdmin/Tools/#configuration","title":"Configuration:","text":"<p><code>rtorrent</code> uses a configuration file located at <code>~/.rtorrent.rc</code> by default. You can create or edit this file to customize your settings. Here's a simple example:</p> <pre><code># ~/.rtorrent.rc\n\n# Set the default download directory\ndirectory = ~/Downloads\n\n# Enable and set the port for incoming connections\nport_range = 6881-6881\n</code></pre>"},{"location":"SysAdmin/Tools/#starting-rtorrent","title":"Starting <code>rtorrent</code>:","text":"<p>You can start <code>rtorrent</code> by simply running the <code>rtorrent</code> command in the terminal:</p> <pre><code>rtorrent\n</code></pre>"},{"location":"SysAdmin/Tools/#basic-usage","title":"Basic Usage:","text":"<ol> <li>Adding Torrents:</li> <li>Press <code>Ctrl + S</code> to open the prompt for adding a new torrent.</li> <li> <p>Enter the URL or path to the torrent file.</p> </li> <li> <p>Managing Torrents:</p> </li> <li>Use <code>Ctrl + D</code> to start or stop a torrent.</li> <li> <p>Use <code>Ctrl + K</code> to remove a torrent.</p> </li> <li> <p>Viewing Information:</p> </li> <li> <p>Use <code>Ctrl + N</code> to toggle the view between different panels.</p> </li> <li> <p>Adjusting Settings:</p> </li> <li> <p>You can adjust various settings, including download/upload speed limits, by editing the configuration file.</p> </li> <li> <p>Exiting <code>rtorrent</code>:</p> </li> <li>Use <code>Ctrl + Q</code> to exit <code>rtorrent</code>.</li> </ol>"},{"location":"SysAdmin/Tools/#additional-tips","title":"Additional Tips:","text":"<ul> <li> <p>You can find more information about <code>rtorrent</code> and its keybindings in the rtorrent User Guide.</p> </li> <li> <p><code>rtorrent</code> has a rich set of features, and you may want to explore additional plugins and configurations based on your needs.</p> </li> <li> <p>For advanced users, you can also use the <code>rtorrent</code> XMLRPC interface to control <code>rtorrent</code> remotely or integrate it with other applications.</p> </li> </ul> <p>Keep in mind that <code>rtorrent</code> is a powerful tool, but it may have a steeper learning curve compared to some GUI-based BitTorrent clients. However, it provides a lot of flexibility and control once you get used to it.</p> <p>To add a torrent to <code>rtorrent</code> using a magnet link, follow these steps:</p> <ol> <li>Open <code>rtorrent</code>:</li> <li> <p>Open your terminal and run <code>rtorrent</code>.</p> </li> <li> <p>Adding a Magnet Link:</p> </li> <li>Press <code>Ctrl + S</code> to open the prompt for adding a new torrent.</li> <li>Enter the magnet link when prompted.</li> </ol> <p>Alternatively, you can start <code>rtorrent</code> with the magnet link as a command-line argument:</p> <p><code>bash    rtorrent 'magnet:?xt=urn:btih:your_magnet_link_here'</code></p> <p>Replace <code>'magnet:?xt=urn:btih:your_magnet_link_here'</code> with the actual magnet link you want to use.</p> <ol> <li>Managing Torrents:</li> <li>Use <code>Ctrl + D</code> to start or stop a torrent.</li> <li>Use <code>Ctrl + K</code> to remove a torrent.</li> </ol> <p>Remember that some magnet links might require additional trackers or metadata, and <code>rtorrent</code> will automatically try to fetch the necessary information.</p> <p>If you encounter any issues, make sure your <code>rtorrent</code> is properly configured and has access to the necessary network resources. Additionally, ensure that your system has the required dependencies for handling magnet links.</p> <p>Note: Magnet links don't contain the file structure information like traditional torrent files, so <code>rtorrent</code> will create a folder with the torrent's hash as the name in your download directory. Inside this folder, it will download the files associated with the magnet link.</p> <p><code>rTorrent</code> is a text-based BitTorrent client for UNIX and UNIX-like systems, known for its efficiency and minimalist interface. It's highly customizable and often used in combination with a screen or tmux session to allow it to run continuously in the background. Here's a basic guide on how to use <code>rTorrent</code>:</p>"},{"location":"SysAdmin/Tools/#installation_1","title":"Installation","text":"<ul> <li>Linux: <code>rTorrent</code> is usually available in the repositories of most Linux distributions. You can install it using your package manager. For example, on Debian-based systems like Ubuntu, you can use <code>sudo apt-get install rtorrent</code>.</li> <li>macOS: You can install <code>rTorrent</code> using Homebrew with the command <code>brew install rtorrent</code>.</li> </ul>"},{"location":"SysAdmin/Tools/#starting-rtorrent_1","title":"Starting rTorrent","text":"<ul> <li>Open a terminal and type <code>rtorrent</code> to start the program.</li> <li>The interface is entirely text-based and navigated using the keyboard.</li> </ul>"},{"location":"SysAdmin/Tools/#basic-commands","title":"Basic Commands","text":"<ul> <li>Adding a Torrent: You can add a torrent by pressing <code>Backspace</code> and then entering the URL or file path to the .torrent file.</li> <li>Starting/Stopping Downloads: Use the arrow keys to navigate to the torrent you want to start or stop and press <code>Ctrl+S</code> to start or <code>Ctrl+D</code> to stop (pressing <code>Ctrl+D</code> twice will remove the torrent).</li> <li>Viewing Torrent Details: Select a torrent and press the right arrow key to view more details about it.</li> <li>Changing Download Directories: Before starting a torrent, you can change the download directory by pressing <code>*</code>, then entering the new path.</li> </ul>"},{"location":"SysAdmin/Tools/#configuration_1","title":"Configuration","text":"<ul> <li><code>rTorrent</code> allows extensive configuration through its <code>.rtorrent.rc</code> file located in your home directory. You can set download directories, configure port forwarding, set up rate limits, etc.</li> <li>The configuration file uses a simple syntax and is well-documented online.</li> </ul>"},{"location":"SysAdmin/Tools/#running-in-the-background","title":"Running in the Background","text":"<ul> <li>To keep <code>rTorrent</code> running continuously, you can use <code>screen</code> or <code>tmux</code>. Start a new screen session with <code>screen</code>, run <code>rtorrent</code>, then detach from the screen with <code>Ctrl+A, D</code>.</li> <li>You can reattach to the session later with <code>screen -r</code>.</li> </ul>"},{"location":"SysAdmin/Tools/#advanced-usage","title":"Advanced Usage","text":"<ul> <li><code>rTorrent</code> supports scripting and can be integrated with various web interfaces for easier management.</li> <li>It also supports advanced features like RSS feed parsing, scheduling, and automation.</li> </ul>"},{"location":"SysAdmin/Tools/#note_1","title":"Note","text":"<ul> <li>Remember that while <code>rTorrent</code> is a powerful tool, you should always use it responsibly and legally. Ensure that you have the right to download and share the content you are using <code>rTorrent</code> for.</li> </ul>"},{"location":"SysAdmin/Tools/#further-learning","title":"Further Learning","text":"<ul> <li>For more advanced configurations and usage scenarios, refer to the <code>rTorrent</code> user guide or community forums.</li> </ul> <p><code>rTorrent</code> has a learning curve, especially for users not familiar with terminal-based applications, but it's highly regarded for its performance and flexibility once mastered.</p> <p>Using <code>rTorrent</code> directly from the shell involves a combination of command-line navigation and keyboard shortcuts specific to <code>rTorrent</code>. Here's a more detailed guide on how to operate <code>rTorrent</code> from the shell:</p>"},{"location":"SysAdmin/Tools/#launching-rtorrent","title":"Launching rTorrent","text":"<ol> <li>Open your terminal: This can be done by searching for \u201cTerminal\u201d in your applications menu or using a keyboard shortcut, often <code>Ctrl+Alt+T</code> on Linux.</li> <li>Start rTorrent: Simply type <code>rtorrent</code> and press <code>Enter</code>. This will launch the <code>rTorrent</code> interface within your terminal.</li> </ol>"},{"location":"SysAdmin/Tools/#navigating-the-interface","title":"Navigating the Interface","text":"<ul> <li>Navigation: Use the <code>Up</code> and <code>Down</code> arrow keys to navigate through the list of torrents.</li> <li>Details View: To view details of a selected torrent, press the <code>Right</code> arrow key. To return to the main view, press the <code>Left</code> arrow key.</li> </ul>"},{"location":"SysAdmin/Tools/#managing-torrents","title":"Managing Torrents","text":"<ul> <li>Adding a Torrent: Press <code>Backspace</code>, then type the URL or path to the .torrent file and press <code>Enter</code>.</li> <li>Starting a Torrent: Select a torrent with the arrow keys and press <code>Ctrl+S</code> to start it.</li> <li>Stopping a Torrent: Select the torrent and press <code>Ctrl+D</code> to stop it. Pressing <code>Ctrl+D</code> again removes the torrent from the list.</li> <li>Changing the Download Directory: Before starting a torrent, select it, press <code>*</code>, then type the path to the desired download directory and press <code>Enter</code>.</li> </ul>"},{"location":"SysAdmin/Tools/#monitoring-and-adjusting-torrents","title":"Monitoring and Adjusting Torrents","text":"<ul> <li>Checking Download/Upload Speed: The bottom of the <code>rTorrent</code> interface shows the global download and upload rates.</li> <li>Adjusting Speed Limits: You can set</li> </ul> <p>Torrenting is a method of downloading and sharing files through a peer-to-peer (P2P) network. <code>rTorrent</code> is a popular, command-line based torrent client for Linux and Unix systems. It uses the libTorrent library, which is known for its high performance and low resource usage. Here's a basic guide on how to use <code>rTorrent</code> for torrenting:</p>"},{"location":"SysAdmin/Tools/#installation_2","title":"Installation","text":"<p>First, you need to install <code>rTorrent</code>. This can vary based on your operating system, but for most Linux distributions, you can use the package manager. For example, on Debian-based systems, you can install it using:</p> <pre><code>sudo apt-get update\nsudo apt-get install rtorrent\n</code></pre>"},{"location":"SysAdmin/Tools/#basic-usage_1","title":"Basic Usage","text":"<ol> <li> <p>Starting rTorrent: Simply type <code>rtorrent</code> in your terminal and press Enter. This will open the <code>rTorrent</code> interface in your terminal.</p> </li> <li> <p>Adding a Torrent: To download a file using a torrent, you need a torrent file or a magnet link. You can add a torrent in <code>rTorrent</code> by:</p> </li> <li>Hitting the <code>Enter</code> key to bring up the command line at the bottom of the interface.</li> <li> <p>Typing the path to the torrent file or pasting the magnet link, then pressing <code>Enter</code> again to start the download.</p> </li> <li> <p>Managing Torrents: Once a torrent is added, you can see it in the main window. You can navigate through the list of torrents using the up and down arrow keys. Here are some basic commands:</p> </li> <li><code>^S</code> (Ctrl+S): Start the download.</li> <li><code>^D</code> (Ctrl+D): Stop the download or remove the torrent if pressed twice.</li> <li> <p><code>^K</code> (Ctrl+K): Stop and close the torrent (removes it from the list but doesn't delete the files).</p> </li> <li> <p>Monitoring Progress: The main interface shows the progress of your downloads, including information like download and upload speed, file size, and completion percentage.</p> </li> <li> <p>Exiting rTorrent: You can exit <code>rTorrent</code> by pressing <code>Ctrl+Q</code>. Ensure that your downloads are either paused or completed before exiting to avoid data loss.</p> </li> </ol>"},{"location":"SysAdmin/Tools/#configuration_2","title":"Configuration","text":"<p><code>rTorrent</code> is highly customizable through its configuration file, usually located at <code>~/.rtorrent.rc</code>. You can edit this file to set default directories for downloads, configure port ranges, set up speed limits, and much more. Here are a few basic settings you might want to configure:</p> <ul> <li>Download directory: Set the default directory where your downloads will be stored.   <code>directory = ~/Downloads</code></li> <li>Session directory: Specify the directory where <code>rTorrent</code> will store its session data.   <code>session = ~/.rtorrent/session</code></li> <li>Port range: Define the range of ports <code>rTorrent</code> will use for incoming connections, which is crucial for optimizing download speeds.   <code>port_range = 50000-50000</code></li> <li>DHT and Peer Exchange: Enable DHT (Distributed Hash Table) and Peer Exchange for better peer discovery.   <code>dht = auto   peer_exchange = yes</code></li> </ul> <p>After editing the configuration file, restart <code>rTorrent</code> for the changes to take effect.</p>"},{"location":"SysAdmin/Tools/#advanced-usage_1","title":"Advanced Usage","text":"<p><code>rTorrent</code> supports advanced features like watch directories (to automatically add torrents), scheduling, and scripting. These can be configured in the <code>.rtorrent.rc</code> file. For example, to set up a watch directory:</p> <pre><code>schedule = watch_directory,5,5,load.start=/path/to/watch/directory/*.torrent\n</code></pre> <p>This command tells <code>rTorrent</code> to check the specified directory every 5 seconds for new <code>.torrent</code> files and automatically start downloading them.</p>"},{"location":"SysAdmin/Tools/#conclusion","title":"Conclusion","text":"<p><code>rTorrent</code> is a powerful and efficient CLI torrent client suitable for users who prefer a lightweight and configurable option. It might have a steeper learning curve due to its command-line nature, but it offers great flexibility and performance for managing torrents.</p> <p>Downloading content via a magnet link using <code>rTorrent</code> or any other torrent client involves a simple process. Magnet links are a popular way to share and download torrents without the need for a physical <code>.torrent</code> file. They provide a method to directly connect to the torrent's content using a hash value.</p> <p>Here's how you can download content using a magnet link in <code>rTorrent</code>:</p>"},{"location":"SysAdmin/Tools/#1-launch-rtorrent","title":"1. Launch <code>rTorrent</code>","text":"<p>Open your terminal and start <code>rTorrent</code> by typing <code>rtorrent</code> and pressing Enter. This will bring up the <code>rTorrent</code> user interface in your terminal window.</p>"},{"location":"SysAdmin/Tools/#2-add-the-magnet-link","title":"2. Add the Magnet Link","text":"<p>To add a magnet link, you need to be in the <code>rTorrent</code> command line mode: - Press <code>Backspace</code> or <code>Enter</code> to get to the bottom command line within the <code>rTorrent</code> interface. - Type the following command (but don't press Enter yet):   <code>load.normal</code> - After typing <code>load.normal</code>, press <code>Space</code>, and then paste your magnet link right after it. The command should look something like this (with a much longer magnet link):   <code>load.normal magnet:?xt=urn:btih:EXAMPLE</code> - Press <code>Enter</code> to add the magnet link to <code>rTorrent</code>. The download should start automatically if the magnet link is valid and there are available peers.</p>"},{"location":"SysAdmin/Tools/#3-monitor-the-download","title":"3. Monitor the Download","text":"<p>Once the magnet link is added, you can see the download in the main <code>rTorrent</code> window. You can monitor its progress, including download speed, upload speed, and completion percentage.</p>"},{"location":"SysAdmin/Tools/#4-manage-the-download","title":"4. Manage the Download","text":"<p>While the download is active, you can use various <code>rTorrent</code> commands to manage it: - To pause or stop the download, highlight it using the arrow keys and press <code>Ctrl+S</code>. - To resume a paused download, select it and press <code>Ctrl+S</code> again. - To remove the torrent, select it and press <code>Ctrl+D</code>. Pressing <code>Ctrl+D</code> again will remove the torrent from the list but won't delete the downloaded files.</p>"},{"location":"SysAdmin/Tools/#5-exit-rtorrent","title":"5. Exit <code>rTorrent</code>","text":"<p>Once your download is complete, or if you need to exit <code>rTorrent</code> for any reason, make sure to properly close it by pressing <code>Ctrl+Q</code>. This ensures that your session data is saved correctly.</p>"},{"location":"SysAdmin/Tools/#note-on-magnet-links","title":"Note on Magnet Links","text":"<p>Magnet links start downloading metadata (including the list of files and their sizes) from peers in the swarm before the actual content download begins. This process might take a few moments depending on the number of available peers and the overall health of the torrent.</p> <p>By following these steps, you can easily download files using magnet links in <code>rTorrent</code>. Remember that the speed and availability of your downloads depend on the torrent's health and the number of seeders and peers in the swarm.</p> <p>The <code>nvidia-smi</code> (NVIDIA System Management Interface) command-line tool is a powerful utility for monitoring and managing NVIDIA GPU devices. It provides real-time information about GPU usage, memory usage, temperature, and more. Here\u2019s how you can use it effectively:</p>"},{"location":"SysAdmin/Tools/#basic-usage_2","title":"Basic Usage","text":"<ol> <li> <p>Open a Terminal: On your Linux system, open a terminal window.</p> </li> <li> <p>Run <code>nvidia-smi</code>: Type the following command and press Enter:</p> </li> </ol> <p><code>bash    nvidia-smi</code></p> <p>This command will display a summary of the GPU status, including:</p> <ul> <li>GPU ID and name</li> <li>Driver version</li> <li>GPU memory usage (total, used, and free)</li> <li>GPU utilization (percentage of GPU resources being used)</li> <li>Temperature</li> <li>Running processes using the GPU</li> </ul>"},{"location":"SysAdmin/Tools/#example-output","title":"Example Output","text":"<p>Here\u2019s an example of what the output might look like:</p> <pre><code>+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 510.39.01    Driver Version: 510.39.01    CUDA Version: 11.6         |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  MemUsage | GPU Util  Compute M. | GPU Memory  | GPU-Util  |\n| GPU  Power Draw  | GPU Memory Util  | Process Name  | PID  |\n|===============================+======================+======================+\n|   0  GeForce GTX 1080 Ti  On | 00000000:01:00.0 Off |                  N/A |\n|  0%   36C    P8    22MiB / 11264MiB |      0%      Default |  0       |\n|    0W |      0%  |                      |  N/A  |\n+-------------------------------+----------------------+----------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|  ID   ID   ID      |   |       |                             |   Usage      |\n|   0    N/A  N/A  N/A   N/A  N/A    N/A                    |      N/A     |\n+-----------------------------------------------------------------------------+\n</code></pre>"},{"location":"SysAdmin/Tools/#useful-options","title":"Useful Options","text":"<p>Here are some commonly used options with <code>nvidia-smi</code>:</p> <ol> <li>Monitor at Regular Intervals:</li> </ol> <p>To continuously monitor your GPU every second, use the <code>-l</code> (loop) option:</p> <p><code>bash    nvidia-smi -l 1</code></p> <p>This will refresh the output every second.</p> <ol> <li>Display in CSV Format:</li> </ol> <p>To output the information in CSV format, which can be useful for logging or analysis:</p> <p><code>bash    nvidia-smi --query-gpu=timestamp,name,index,utilization.gpu,memory.total,memory.used,memory.free,temperature.gpu --format=csv</code></p> <ol> <li>Query Specific Information:</li> </ol> <p>You can use the <code>--query-gpu</code> option to get specific information about the GPU. For example:</p> <p><code>bash    nvidia-smi --query-gpu=utilization.gpu,memory.used,memory.free --format=csv</code></p> <ol> <li>Display GPU Processes:</li> </ol> <p>To see which processes are using the GPU:</p> <p><code>bash    nvidia-smi pmon</code></p> <ol> <li>Kill a Process:</li> </ol> <p>If you want to terminate a process that is using the GPU, you can use the <code>-p</code> option followed by the process ID (PID):</p> <p><code>bash    nvidia-smi -i 0 -p &lt;PID&gt;</code></p> <ol> <li>Set Application Clocks (advanced usage):</li> </ol> <p>You can set application clocks for a specific GPU to manage power and performance:</p> <p><code>bash    nvidia-smi -i 0 -ac &lt;mem_clock&gt;,&lt;graphics_clock&gt;</code></p>"},{"location":"SysAdmin/Tools/#monitoring-power-and-performance","title":"Monitoring Power and Performance","text":"<p>If you want to monitor power usage and performance, you can combine <code>nvidia-smi</code> with other monitoring tools. For example, you might want to create a bash script to log data at regular intervals.</p>"},{"location":"SysAdmin/Tools/#example-bash-script","title":"Example Bash Script","text":"<p>Here\u2019s a simple example of a bash script that logs GPU usage every minute:</p> <pre><code>#!/bin/bash\nwhile true; do\n    echo \"Logging GPU usage at $(date)\" &gt;&gt; gpu_usage.log\n    nvidia-smi --query-gpu=timestamp,name,index,utilization.gpu,memory.total,memory.used,memory.free,temperature.gpu --format=csv &gt;&gt; gpu_usage.log\n    sleep 60\ndone\n</code></pre>"},{"location":"SysAdmin/Tools/#conclusion_1","title":"Conclusion","text":"<p>The <code>nvidia-smi</code> command is a versatile tool for monitoring your NVIDIA GPUs. By using various options, you can tailor the information you receive to suit your needs, whether for performance tuning, troubleshooting, or resource management.</p>"},{"location":"SysAdmin/Tweaks/","title":"Tweaking the System","text":""},{"location":"SysAdmin/Tweaks/#chaning-resolution-of-the-screen-with-xrandr","title":"Chaning resolution of the screen with xrandr","text":"<p>Listing all possible resolution settings</p> <pre><code>xrandr\n</code></pre> <p>Listing the names of the active monitors</p> <pre><code>xrandr --listactivemonitors\n</code></pre> <p>Give an active monitor named \"eDP-1\", this sets the resolution at 1024x768</p> <pre><code>xrandr --output eDP-1 --mode 1024x768\n</code></pre>"},{"location":"SysAdmin/Tweaks/#symlinking","title":"Symlinking","text":""},{"location":"SysAdmin/Tweaks/#usefulness-of-symbolic-linking","title":"Usefulness of symbolic linking","text":"<p>After installing telegram on my machine, in some location, I could just create a symbolic link to allow dmenu to find the program among the /usr/bin/ (and possibly even /usr/local/bin/) executables.  dmenu actively finds its own executables from that directory.  The implications are that since that directory is also part of the $PATH environment variable, at least for ZSH and Bash, we can invoke these executables also from the commandline itself, no matter the path we're in while navigating the file system with out shell.</p> <pre><code>sudo ln -s /home/angelo/AppImages/Telegram/Telegram /usr/bin/telegram\n</code></pre>"},{"location":"SysAdmin/Tweaks/#uninstalling-software","title":"Uninstalling Software","text":"<p>To completely remove a piece of software along with its configuration files in Ubuntu, you can use the <code>purge</code> option with the <code>apt-get</code> command. This is particularly useful when you want to ensure that all settings are reset if you plan to reinstall the software later. Here\u2019s how you can do it:</p> <ol> <li> <p>Open the Terminal: You can open the Terminal by pressing <code>Ctrl+Alt+T</code> or by searching for it in the dashboard.</p> </li> <li> <p>Update your package list (optional but recommended):    <code>bash    sudo apt update</code></p> </li> <li> <p>Purge the software: Replace <code>package_name</code> with the actual name of the software package you want to remove. You can also list multiple packages separated by spaces.    <code>bash    sudo apt purge package_name</code></p> </li> <li> <p>Remove dependencies that are no longer required (optional):    <code>bash    sudo apt autoremove</code></p> </li> </ol> <p>This process will remove the software and its configuration files, as well as any unused dependencies if you run the <code>autoremove</code> command. This helps keep your system clean. If you're unsure of the package name, you can search for it using:</p> <pre><code>apt search keyword\n</code></pre> <p>Replace <code>keyword</code> with a term related to the software you're trying to find. This will list all packages related to the keyword, helping you pinpoint the exact package name to purge.</p>"},{"location":"SysAdmin/Tweaks/#managing-the-path-environment-variable","title":"Managing the $PATH environment variable","text":""},{"location":"SysAdmin/Tweaks/#temporary-addition","title":"Temporary Addition","text":"<p>If you want to add a directory to the PATH temporarily, meaning it will only last for the duration of the session or terminal window, you can use the following command in the terminal:</p> <pre><code>export PATH=$PATH:/path/to/directory\n</code></pre> <p>Replace <code>/path/to/directory</code> with the actual path of the directory you want to add. This change will last until the terminal is closed.</p>"},{"location":"SysAdmin/Tweaks/#permanent-addition","title":"Permanent Addition","text":"<p>To make the addition permanent, you will need to add the export command to a startup file like <code>.bashrc</code>, <code>.bash_profile</code>, or <code>.profile</code>, depending on the shell and setup you are using.</p> <ol> <li>Open your terminal.</li> <li>Edit the startup file:</li> <li>If you are using Bash, you can add the directory to your PATH in your <code>.bashrc</code> or <code>.bash_profile</code> file. Open the file with a text editor, such as nano:      <code>bash      nano ~/.bashrc</code></li> <li> <p>For other shells, like Zsh, you might edit <code>.zshrc</code>.</p> </li> <li> <p>Add the export command to the end of the file:    <code>bash    export PATH=$PATH:/path/to/directory</code>    Again, replace <code>/path/to/directory</code> with your specific directory.</p> </li> <li> <p>Save and close the file. For nano, press <code>Ctrl + X</code>, then <code>Y</code> to confirm, and <code>Enter</code> to save.</p> </li> <li> <p>Source the file to apply the changes immediately without needing to restart your terminal:    <code>bash    source ~/.bashrc</code>    Replace <code>.bashrc</code> with the name of the file you edited, if different.</p> </li> </ol>"},{"location":"SysAdmin/Tweaks/#verify-the-change","title":"Verify the Change","text":"<p>After adding the directory to your PATH, you can verify that it was added successfully by typing:</p> <pre><code>echo $PATH\n</code></pre> <p>This command will display the contents of your PATH variable, and you should see your directory listed there.</p> <p>Adding directories to the PATH is a common practice for simplifying command executions and script runs, especially for custom scripts or software installed in non-standard locations.</p> <p>It looks like you've correctly formulated the command to add <code>/home/angelo/AppImages</code> to your PATH in the <code>.zshrc</code> file for Zsh shell. However, the double quotes are broken into segments which might cause a syntax error. Here\u2019s how to properly format it:</p>"},{"location":"SysAdmin/Tweaks/#correct-syntax","title":"Correct Syntax","text":"<p>You should ensure the entire <code>export</code> command is within a single set of quotes if needed, or better yet, avoid extra quotes around the whole command, like this:</p> <pre><code>export PATH=$PATH:/home/angelo/AppImages\n</code></pre> <p>Here\u2019s how you can make this correction:</p> <ol> <li>Open your <code>.zshrc</code> file:    Open a terminal and edit the <code>.zshrc</code> using a text editor like nano or vim:</li> </ol> <p><code>bash    nano ~/.zshrc</code></p> <ol> <li> <p>Modify the PATH line:    Find the line where you tried to add the directory to the PATH. It might look like your example with broken quotes. Change it to the correct format shown above.</p> </li> <li> <p>Save and close the editor:</p> </li> <li>For nano, press <code>Ctrl + X</code>, then <code>Y</code> to confirm, and <code>Enter</code> to save.</li> <li> <p>For vim, press <code>:wq</code> and then <code>Enter</code>.</p> </li> <li> <p>Apply the changes:    To make sure your current terminal session recognizes the change, source the <code>.zshrc</code> file:</p> </li> </ol> <p><code>bash    source ~/.zshrc</code></p> <ol> <li>Verify the PATH:    Check that your directory was added successfully:</li> </ol> <p><code>bash    echo $PATH</code></p> <p>This should show the <code>/home/angelo/AppImages</code> directory appended to the existing PATH. If you see it there, you've successfully added it to your PATH permanently for all future terminal sessions that use the Zsh shell.</p> <p>Creating an alias in Unix-like operating systems is a common way to simplify command sequences or customize your shell experience. Aliases are typically set up in your shell\u2019s configuration file, such as <code>.bashrc</code> for Bash or <code>.zshrc</code> for Zsh. Here\u2019s how to create an alias:</p>"},{"location":"SysAdmin/Tweaks/#for-bash","title":"For Bash","text":"<ol> <li> <p>Open your <code>.bashrc</code> file:    Open a terminal and edit the <code>.bashrc</code> using a text editor. For example, you can use <code>nano</code>:    <code>bash    nano ~/.bashrc</code></p> </li> <li> <p>Add the alias:    At the end of the file, you can add your alias command. For example, if you want to create an alias called <code>ll</code> that runs <code>ls -l</code>, you would write:    <code>bash    alias ll='ls -l'</code></p> </li> <li> <p>Save and close the file:    If you\u2019re using <code>nano</code>, press <code>Ctrl + X</code>, then <code>Y</code> to confirm, and <code>Enter</code> to save.</p> </li> <li> <p>Activate the alias:    Source your <code>.bashrc</code> to make the alias available in your current session:    <code>bash    source ~/.bashrc</code></p> </li> </ol>"},{"location":"SysAdmin/Tweaks/#for-zsh","title":"For Zsh","text":"<ol> <li> <p>Open your <code>.zshrc</code> file:    Similarly, use a text editor to open your <code>.zshrc</code>:    <code>bash    nano ~/.zshrc</code></p> </li> <li> <p>Add the alias:    Add your desired alias to the end of the file. For instance, if you want to simplify the <code>grep</code> command to always include color:    <code>bash    alias grep='grep --color=auto'</code></p> </li> <li> <p>Save and close the file:    Save your changes and exit the text editor.</p> </li> <li> <p>Activate the alias:    Source your <code>.zshrc</code> file:    <code>bash    source ~/.zshrc</code></p> </li> </ol>"},{"location":"SysAdmin/Tweaks/#verification-and-use","title":"Verification and Use","text":"<p>After setting up your alias and sourcing the respective configuration file, you can verify that the alias is working by simply typing the alias in the terminal:</p> <pre><code>ll\n</code></pre> <p>This should execute the <code>ls -l</code> command, showing a detailed listing of files and directories.</p>"},{"location":"SysAdmin/Tweaks/#general-tips","title":"General Tips","text":"<ul> <li>Aliases are only available for interactive shell sessions (not in scripts, unless explicitly sourced).</li> <li>You can use aliases to shorten complex commands, add default options to commonly used programs, or correct frequent typos.</li> <li>For temporary aliases that only last for the duration of a terminal session, you can type the alias command directly into the terminal without adding it to a <code>.bashrc</code> or <code>.zshrc</code> file.</li> </ul> <p>By leveraging aliases, you can greatly enhance your productivity and streamline your command line operations.</p>"},{"location":"SysAdmin/bluetooth/","title":"Bluetooth","text":"<p>Managing Bluetooth from the command line in Linux can be a powerful way to handle your devices, especially in environments where a graphical interface is unavailable or undesirable. Here\u2019s a step-by-step guide on how to do this using <code>bluetoothctl</code>, a command-line utility for Bluetooth management in Linux:</p>"},{"location":"SysAdmin/bluetooth/#step-1-install-bluetooth-utilities","title":"Step 1: Install Bluetooth Utilities","text":"<p>Most Linux distributions come with Bluetooth utilities installed by default. If not, you can install them using your package manager. For example, on Debian-based systems (like Ubuntu), you can use:</p> <pre><code>sudo apt-get update\nsudo apt-get install bluez bluez-tools\n</code></pre>"},{"location":"SysAdmin/bluetooth/#step-2-start-the-bluetooth-service","title":"Step 2: Start the Bluetooth Service","text":"<p>Ensure the Bluetooth service is active. You can start or check the status of the service with:</p> <pre><code>sudo systemctl start bluetooth\nsudo systemctl status bluetooth\n</code></pre>"},{"location":"SysAdmin/bluetooth/#step-3-launch-bluetoothctl","title":"Step 3: Launch <code>bluetoothctl</code>","text":"<p>Enter the Bluetooth command line interface:</p> <pre><code>bluetoothctl\n</code></pre> <p>You\u2019ll be greeted by a prompt such as <code>[bluetooth]#</code>, indicating that you are now interacting with the Bluetooth controller.</p>"},{"location":"SysAdmin/bluetooth/#step-4-basic-commands-in-bluetoothctl","title":"Step 4: Basic Commands in <code>bluetoothctl</code>","text":"<ul> <li>List available devices:    <code>bash   devices</code></li> <li>Power on/off Bluetooth:   <code>bash   power on   power off</code></li> <li>Make the device discoverable:   <code>bash   discoverable on   discoverable off</code></li> <li> <p>Pair with a device: First, ensure your device is discoverable, then use:   <code>bash   pair [DEVICE MAC]</code>   Replace <code>[DEVICE MAC]</code> with the MAC address of the device you want to pair with.</p> </li> <li> <p>Connect to a device:   <code>bash   connect [DEVICE MAC]</code></p> </li> <li> <p>Disconnect a device:   <code>bash   disconnect [DEVICE MAC]</code></p> </li> <li> <p>Remove a device:   <code>bash   remove [DEVICE MAC]</code></p> </li> <li> <p>Scan for new devices:   <code>bash   scan on   scan off</code></p> </li> </ul>"},{"location":"SysAdmin/bluetooth/#step-5-automating-tasks","title":"Step 5: Automating Tasks","text":"<p>You can use <code>bluetoothctl</code> commands in scripts by echoing commands into <code>bluetoothctl</code>. For example, to connect to a device and then exit:</p> <pre><code>echo -e \"connect [DEVICE MAC]\\nexit\" | bluetoothctl\n</code></pre> <p>This allows for automation of Bluetooth tasks which can be very useful in a variety of scenarios.</p>"},{"location":"SysAdmin/bluetooth/#step-6-exiting-bluetoothctl","title":"Step 6: Exiting <code>bluetoothctl</code>","text":"<p>To exit <code>bluetoothctl</code>, simply type:</p> <pre><code>exit\n</code></pre> <p>or press <code>Ctrl+D</code>.</p>"},{"location":"SysAdmin/bluetooth/#additional-tools-and-tips","title":"Additional Tools and Tips","text":"<ul> <li>blueman: If you occasionally prefer a GUI, <code>blueman</code> is an excellent graphical manager for Bluetooth.</li> <li>Custom scripts: You can create custom scripts to manage Bluetooth devices more efficiently based on your regular needs.</li> </ul> <p>Using <code>bluetoothctl</code> gives you robust control over Bluetooth on your Linux machine, suitable for both interactive use and automation within scripts.If you're looking for a smaller, more lightweight graphical interface for managing Bluetooth on Linux, you might consider using Blueman. Blueman is a popular alternative to the more comprehensive but heavier default Bluetooth managers found in many Linux distributions. It's designed to provide a simple yet effective user interface for managing Bluetooth devices.</p>"},{"location":"SysAdmin/bluetooth/#features-of-blueman","title":"Features of Blueman:","text":"<ul> <li>Device Management: Supports connecting, disconnecting, pairing, and unpairing Bluetooth devices.</li> <li>Audio Support: Manage audio profiles and stream audio from connected devices.</li> <li>Network Access: Set up and manage network access through connected Bluetooth devices.</li> <li>Send Files: Provides options to send files to connected devices.</li> <li>Receive Files: Configure and accept files sent from other devices.</li> <li>Visibility Management: Easily toggle the visibility of your Bluetooth device.</li> </ul>"},{"location":"SysAdmin/bluetooth/#installing-blueman","title":"Installing Blueman:","text":"<p>You can install Blueman on most Linux distributions through the package manager. Here\u2019s how you can do it on some common distributions:</p> <ul> <li> <p>Debian/Ubuntu and derivatives:   <code>bash   sudo apt update   sudo apt install blueman</code></p> </li> <li> <p>Fedora:   <code>bash   sudo dnf install blueman</code></p> </li> <li> <p>Arch Linux:   <code>bash   sudo pacman -S blueman</code></p> </li> </ul>"},{"location":"SysAdmin/bluetooth/#using-blueman","title":"Using Blueman:","text":"<p>Once installed, you can start Blueman usually from your application menu under the name \"Bluetooth Manager\" or similar. You can also start it from the command line by typing <code>blueman-manager</code>.</p> <p>Blueman's interface is straightforward, making it easy to discover and manage your Bluetooth devices without a lot of overhead or unnecessary features. It's particularly suitable for users who prefer a balance between functionality and resource consumption.</p>"},{"location":"SysAdmin/bootable_usb/","title":"Bootable usb","text":""},{"location":"SysAdmin/bootable_usb/#using-woeusb-for-windows","title":"Using <code>woeusb</code> for Windows","text":"<p>Let's check the path of the USB drive we connected to the computer</p> <pre><code>sudo fdisk -l\n</code></pre> <p>If it is mounted already, you want to unmount it, check it with <code>lsblk</code>: if there's a path on the file system that is related to the USB drive, then it's mounted, it is possible to unmount it this way</p> <pre><code>sudo umount /dev/sdb1\nsudo umount /dev/sdb2\n</code></pre> <p>of course this formatting depends on your specific naming.</p> <p>Then, finally, in my case, the path to the windows .iso file is in the <code>~/Desktop/</code> folder and the one to the usb drive is <code>/dev/sdb/</code></p> <pre><code>sudo ./woeusb-5.2.4.bash --device ~/Desktop/Win11_24H2_English_x64.iso /dev/sdb --tgt-fs NTFS\n</code></pre>"},{"location":"SysAdmin/bootable_usb/#bootable-usb-for-linux","title":"Bootable USB for linux","text":"<p>Creating a bootable USB drive with a Linux distribution from within a Linux environment can be straightforward and is a common task for those who wish to install Linux on another machine or use a portable version of the operating system. There are several tools available for this purpose, but two of the most popular and reliable ones are dd and Balena Etcher.</p>"},{"location":"SysAdmin/bootable_usb/#using-dd-command","title":"Using dd Command","text":"<p>The <code>dd</code> command is a powerful Unix utility for low-level copying of raw data. It is pre-installed in most Linux distributions and is very efficient, though it requires careful handling due to its potential to overwrite any disk if used incorrectly.</p>"},{"location":"SysAdmin/bootable_usb/#steps-to-create-a-bootable-usb-using-dd","title":"Steps to Create a Bootable USB Using dd:","text":"<ol> <li> <p>Download the ISO File: Download the .iso file of the Linux distribution you want to install from its official website.</p> </li> <li> <p>Identify Your USB Device:</p> </li> <li>Insert your USB drive.</li> <li> <p>Open a terminal and run <code>lsblk</code> or <code>fdisk -l</code> to list all disk partitions and identify your USB drive (usually <code>/dev/sdb</code>, <code>/dev/sdc</code>, etc.).</p> </li> <li> <p>Write the ISO to the USB:</p> </li> <li>Warning: This step will erase all existing data on the USB drive.</li> <li>Use the <code>dd</code> command:      <code>bash      sudo dd if=path_to_your_iso.iso of=/dev/sdx bs=4M status=progress oflag=sync</code></li> <li> <p>Replace <code>path_to_your_iso.iso</code> with the path to your ISO file and <code>/dev/sdx</code> with the correct device identifier for your USB drive (not a partition like <code>/dev/sdx1</code>).</p> </li> <li> <p>Wait for the Process to Complete: The <code>status=progress</code> option will show you the write progress.</p> </li> <li> <p>Safely Eject the USB Drive: Once done, you can eject the USB drive:    <code>bash    sync    sudo eject /dev/sdx</code></p> </li> </ol>"},{"location":"SysAdmin/bootable_usb/#using-balena-etcher","title":"Using Balena Etcher","text":"<p>Balena Etcher is a graphical USB image writer that simplifies the process of creating bootable USB drives. It is user-friendly and reduces the risk of accidentally writing to the wrong disk.</p>"},{"location":"SysAdmin/i3blocks/","title":"i3blocks","text":""},{"location":"SysAdmin/i3blocks/#volume-control-setup","title":"Volume control setup","text":""},{"location":"SysAdmin/i3wm/","title":"Setting up i3wm on a Thinkpad computer (perhaps useful for other brands)","text":"<p>First, check out which GPU your computer has, if it is a Thinkpad, an older model, then most likely it mounts an integrated graphics processor that we'll refer to as \"intel graphics\". Neofetch is a quick way to check this out. Then, it is time to </p>"},{"location":"SysAdmin/i3wm/#brightness-control","title":"Brightness Control","text":""},{"location":"SysAdmin/i3wm/#checking-ls-sysclassbacklight-output","title":"Checking <code>ls /sys/class/backlight</code> output","text":"<p>If <code>/sys/class/backlight</code> is empty on your ThinkPad T440p, it usually means that the kernel isn't detecting any backlight control interfaces. This is common with some older laptops or specific Linux setups, especially if the GPU or ACPI backlight settings aren\u2019t fully compatible. Here are a few steps you can try to troubleshoot and hopefully resolve this issue:</p>"},{"location":"SysAdmin/i3wm/#1-check-kernel-boot-parameters","title":"1. Check Kernel Boot Parameters","text":"<p>Some kernel parameters can help expose backlight controls.  Try adding one of these parameters to your boot configuration:</p> <ol> <li>Open your boot loader configuration file (usually <code>/etc/default/grub</code> for GRUB).</li> <li>Edit the <code>GRUB_CMDLINE_LINUX_DEFAULT</code> line, adding one of the following options:</li> <li>For Intel graphics:       <code>acpi_backlight=video</code></li> <li>Or:      <code>acpi_backlight=vendor</code></li> <li>Alternatively:      <code>acpi_osi=Linux acpi_backlight=native</code></li> </ol> <p>On my Thinkpad t440p, it is:</p> <pre><code>GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash acpi_backlight=video\"\n</code></pre> <ol> <li>Update GRUB with:    <code>bash       sudo update-grub</code></li> <li>Reboot your system and check if <code>/sys/class/backlight</code> now contains an entry.</li> </ol>"},{"location":"SysAdmin/i3wm/#2-install-xbacklight-if-not-already-installed","title":"2. Install <code>xbacklight</code> (If Not Already Installed)","text":"<p>If you have an Intel GPU, <code>xbacklight</code> can often control brightness at the software level, even if hardware backlight control isn\u2019t available:</p> <pre><code>sudo apt install xbacklight\nxbacklight -set 50  # Sets brightness to 50%\n</code></pre>"},{"location":"SysAdmin/i3wm/#3-test-intel-or-acpi-video-drivers","title":"3. Test Intel or ACPI Video Drivers","text":"<p>If you\u2019re using the Intel graphics driver, ensure it\u2019s installed and loaded:</p> <pre><code>lsmod | grep i915\n</code></pre> <p>If <code>i915</code> isn\u2019t loaded, add it manually:</p> <pre><code>sudo modprobe i915\n</code></pre>"},{"location":"SysAdmin/i3wm/#4-use-intel_backlight-if-available","title":"4. Use <code>intel_backlight</code> (if Available)","text":"<p>On some systems, you might find backlight control under <code>/sys/class/backlight/intel_backlight</code>. If it\u2019s there, you can adjust brightness directly by writing values to the <code>brightness</code> file inside:</p> <pre><code>echo [value] | sudo tee /sys/class/backlight/intel_backlight/brightness\n</code></pre> <p>Adjust <code>[value]</code> within the range found in <code>max_brightness</code>.</p> <p>Let me know if any of these options work, or if you'd like more tailored troubleshooting!</p> <p>https://wiki.archlinux.org/title/Backlight</p>"},{"location":"SysAdmin/i3wm/#then-by-following-httpswwwredditcomrthinkpadcommentse9b9jabrightness_and_volume_buttons_on_linuxrdt42208","title":"Then, by following <code>https://www.reddit.com/r/thinkpad/comments/e9b9ja/brightness_and_volume_buttons_on_linux/?rdt=42208</code>","text":"<p>You're going to need to have xf86-video-intel installed.</p>"},{"location":"SysAdmin/i3wm/#how-to-install-xf86-video-intel","title":"How to install xf86-video-intel","text":"<p>The <code>xf86-video-intel</code> driver is an open-source Intel graphics driver used for systems running X11 on Linux. This driver is commonly recommended for older Intel GPUs, while newer Intel graphics chips (since around the Skylake generation) are usually well-supported by the default <code>modesetting</code> driver. Here\u2019s how to install <code>xf86-video-intel</code> on various Linux distributions:</p>"},{"location":"SysAdmin/i3wm/#1-check-if-you-need-the-intel-driver","title":"1. Check if You Need the Intel Driver","text":"<ul> <li>For most modern Intel GPUs (especially Skylake or newer), the <code>modesetting</code> driver works well, and <code>xf86-video-intel</code> may not provide additional benefits.</li> <li>You can check your GPU generation by running:      <code>bash      lspci | grep -i VGA</code></li> <li>If your GPU is older (like Haswell or earlier), <code>xf86-video-intel</code> can be beneficial.</li> </ul>"},{"location":"SysAdmin/i3wm/#2-installation-by-distribution","title":"2. Installation by Distribution","text":""},{"location":"SysAdmin/i3wm/#on-ubuntu-and-debian","title":"On Ubuntu and Debian","text":"<ul> <li>Update package repositories and install <code>xf86-video-intel</code>:      <code>bash      sudo apt update      sudo apt install xserver-xorg-video-intel</code></li> <li>Once installed, restart your X session (log out and log back in, or restart the system) to apply the driver.</li> </ul>"},{"location":"SysAdmin/i3wm/#on-arch-linux-and-manjaro","title":"On Arch Linux and Manjaro","text":"<ul> <li>Arch and its derivatives typically use <code>modesetting</code> by default, but you can install <code>xf86-video-intel</code> if needed:      <code>bash      sudo pacman -S xf86-video-intel</code></li> <li>Restart your X session to start using the Intel driver.</li> </ul>"},{"location":"SysAdmin/i3wm/#on-fedora","title":"On Fedora","text":"<ul> <li>Fedora doesn\u2019t package <code>xf86-video-intel</code> by default because it prefers the <code>modesetting</code> driver. However, you can install it from the Fedora repositories:      <code>bash      sudo dnf install xorg-x11-drv-intel</code></li> <li>After installation, restart the X session.</li> </ul>"},{"location":"SysAdmin/i3wm/#on-opensuse","title":"On openSUSE","text":"<ul> <li>Install <code>xf86-video-intel</code> using the package manager:      <code>bash      sudo zypper install xf86-video-intel</code></li> </ul>"},{"location":"SysAdmin/i3wm/#3-confirm-the-driver-is-active","title":"3. Confirm the Driver is Active","text":"<ul> <li>After installing and restarting, verify that <code>xf86-video-intel</code> is being used by running:      <code>bash      inxi -G</code></li> <li>Alternatively, you can check your Xorg log:      <code>bash      cat /var/log/Xorg.0.log | grep -i intel</code></li> <li>This should show whether the Intel driver is active.</li> </ul> <p>If you encounter issues or your system defaults to <code>modesetting</code>, consider removing <code>xf86-video-intel</code> since the newer modesetting driver is often more stable and compatible with modern hardware.</p>"},{"location":"SysAdmin/i3wm/#how-to-switch-to-xf86-video-intel","title":"How to Switch to <code>xf86-video-intel</code>","text":"<p>If you\u2019d still like to use <code>xf86-video-intel</code>, here\u2019s what you can do:</p> <ol> <li>Create an Xorg Configuration File for Intel:</li> <li>Create a configuration file to specify the Intel driver:      <code>bash      sudo mkdir -p /etc/X11/xorg.conf.d      sudo nano /etc/X11/xorg.conf.d/20-intel.conf</code></li> <li>Add the following configuration:      <code>plaintext      Section \"Device\"          Identifier \"Intel Graphics\"          Driver \"intel\"      EndSection</code></li> <li> <p>Save and close the file.</p> </li> <li> <p>Restart Your X Session:</p> </li> <li> <p>Log out and log back in, or restart your computer.</p> </li> <li> <p>Verify:</p> </li> <li>After restarting, check if the Intel driver is now in use:      <code>bash      inxi -G</code></li> <li>You should see <code>driver: X: loaded: intel</code> instead of <code>modesetting</code>.</li> </ol> <p>The <code>xf86-video-intel</code> driver can offer additional configuration options for certain older Intel GPUs, but <code>modesetting</code> is typically more stable. Let me know if you notice any differences in performance or display after switching!</p>"},{"location":"SysAdmin/i3wm/#is-this-driver-active","title":"Is this driver active?","text":"<pre><code>Graphics:\n  Device-1: Intel 4th Gen Core Processor Integrated Graphics driver: i915\n    v: kernel\n  Display: x11 server: X.Org v: 1.21.1.4 driver: X: loaded: modesetting\n    unloaded: fbdev,vesa gpu: i915 resolution: 1600x900~60Hz\n  OpenGL: renderer: Mesa Intel HD Graphics 4600 (HSW GT2)\n    v: 4.6 Mesa 23.2.1-1ubuntu3.1~22.04.2\n</code></pre> <p>From your output, it appears that the <code>xf86-video-intel</code> driver is not active. Instead, your system is using the modesetting driver (<code>driver: X: loaded: modesetting</code>), which is provided by default for Intel GPUs on many Linux distributions.</p> <p>Here\u2019s a breakdown of what each line in your output means:</p> <ul> <li>Driver in Use: The X server is using the <code>modesetting</code> driver for your display, which is common and often recommended for stability, especially with somewhat newer hardware.</li> <li>Kernel Driver: The <code>i915</code> driver is loaded by the Linux kernel to manage Intel graphics hardware. This driver interacts directly with the Intel GPU at the kernel level and is compatible with both the <code>modesetting</code> and <code>xf86-video-intel</code> X drivers.</li> <li>OpenGL Renderer: OpenGL is using the <code>Mesa Intel HD Graphics 4600</code> driver, which provides 3D rendering and hardware acceleration.</li> </ul> <p>Whereas, if the output looks like this: </p> <pre><code>how about this Graphics:\n  Device-1: Intel 4th Gen Core Processor Integrated Graphics driver: i915\n    v: kernel\n  Display: x11 server: X.Org v: 1.21.1.4 driver: X: loaded: intel gpu: i915\n    resolution: 1600x900~60Hz\n  OpenGL: renderer: Mesa Intel HD Graphics 4600 (HSW GT2)\n    v: 4.6 Mesa 23.2.1-1ubuntu3.1~22.04.2\n</code></pre> <p>This output shows that the <code>xf86-video-intel</code> driver is now active. Here's how we can tell:</p> <ul> <li>X Driver Loaded: The line <code>driver: X: loaded: intel</code> indicates that the X server is now using the <code>intel</code> driver, which comes from the <code>xf86-video-intel</code> package.</li> <li>Kernel Driver: The <code>i915</code> kernel driver is still managing the Intel GPU at the kernel level, as expected. This is normal, as <code>i915</code> is the kernel module responsible for handling Intel graphics hardware.</li> <li>OpenGL Renderer: OpenGL continues to use the Mesa Intel driver for the HD Graphics 4600, which provides 3D rendering and hardware acceleration.</li> </ul> <p>With the <code>xf86-video-intel</code> driver active, you may gain some additional configuration options specific to Intel hardware, like <code>TearFree</code> (for tear-free display) and power-saving features. However, if you encounter any performance issues, switching back to the <code>modesetting</code> driver is an option, as it tends to be more stable for some configurations. </p>"},{"location":"SysAdmin/i3wm/#install-xbacklight","title":"Install xbacklight","text":"<ol> <li> <p>Check whether xbacklight works (xbacklight -inc 25, xbacklight -dec 25)</p> </li> <li> <p>Find out what the brightness keys are called with xev (probably something like XF86MonBrightnessUp and XF86MonBrightnessDown)</p> </li> <li> <p>Create hotkeys in your i3 configuration (e.g. bindsym XF86MonBrightnessDown exec xbacklight -dec 25)</p> </li> </ol> <p>That's for brightness, for volume you do the same but use amixer to set the volume  (e.g. amixer set Master 4%+ and amixer set Master toggle).</p> <p>xev got me this output: RRNotify event, serial 49, synthetic NO, window 0x2c00001,     subtype XRROutputPropertyChangeNotifyEvent     output eDP1, property Backlight, timestamp 739909, state NewValue</p> <p>RRNotify event, serial 49, synthetic NO, window 0x2c00001,     subtype XRROutputPropertyChangeNotifyEvent     output eDP1, property BACKLIGHT, timestamp 739909, state NewValue     The output from <code>xev</code> indicates that <code>RRNotify</code> events are being generated for the \"Backlight\" and \"BACKLIGHT\" properties on your laptop's internal display (<code>eDP1</code>). These events are triggered by changes in the backlight level, which suggests that you do have access to the backlight control through X11's <code>RandR</code> (Resize and Rotate) extension.</p> <p>Here are a few steps to help you set up backlight control:</p> <ol> <li> <p>Verify available backlight interfaces:    Run the following command to check which backlight interfaces are available:    <code>bash    ls /sys/class/backlight/</code>    If you see entries like <code>intel_backlight</code> or <code>acpi_video0</code>, these are your backlight control interfaces. </p> </li> <li> <p>Adjust the backlight level manually:    You can test setting the brightness by writing directly to the <code>brightness</code> file under the appropriate backlight interface. For instance, if <code>intel_backlight</code> is available:    <code>bash    echo 1000 | sudo tee /sys/class/backlight/intel_backlight/brightness</code>    Note that <code>1000</code> here is an example; valid values range from <code>0</code> to the maximum value shown in <code>/sys/class/backlight/&lt;interface&gt;/max_brightness</code>.</p> </li> <li> <p>Automate with <code>xrandr</code>:    Since <code>xev</code> detected the <code>Backlight</code> property change events, you might be able to adjust brightness using <code>xrandr</code> commands. Try this to control brightness on <code>eDP1</code>:    <code>bash    xrandr --output eDP1 --brightness 0.5  # Adjust the brightness level (0.0 to 1.0)</code>    This approach only simulates brightness changes through software and may not change the actual backlight level.</p> </li> <li> <p>Integrate with i3wm:    To set up keybindings in <code>i3wm</code>, you can edit your i3 config file (typically <code>~/.config/i3/config</code>) to include commands that adjust brightness. For example:    <code>bash    bindsym XF86MonBrightnessUp exec --no-startup-id xbacklight -inc 10    bindsym XF86MonBrightnessDown exec --no-startup-id xbacklight -dec 10</code>    Ensure <code>xbacklight</code> is installed (<code>sudo apt install xbacklight</code>).</p> </li> </ol> <p>This setup should give you backlight control in i3wm on your ThinkPad T440p using X11. Let me know if any specific part needs more detail.</p>"},{"location":"SysAdmin/i3wm/#keeping-the-laptops-display-output-up-when-the-lid-is-closed","title":"Keeping the laptop's display output up when the lid is closed","text":"<p>To ensure that your ThinkPad T440p continues to display output on the external monitor when you close the laptop lid, you'll need to modify the system settings related to lid close behavior. Here\u2019s how you can do it on your i3-based Linux setup:</p>"},{"location":"SysAdmin/i3wm/#1-edit-logindconf","title":"1. Edit <code>logind.conf</code>","text":"<p>The systemd <code>logind.conf</code> file controls what happens when you close the lid.</p> <ol> <li> <p>Open the <code>logind.conf</code> file with your preferred text editor. For example:    <code>bash    sudo nano /etc/systemd/logind.conf</code></p> </li> <li> <p>Look for the following lines (they might be commented out with <code>#</code>):    <code>#HandleLidSwitch=suspend    #HandleLidSwitchExternalPower=suspend    #HandleLidSwitchDocked=ignore</code></p> </li> <li> <p>Modify them as follows:    <code>HandleLidSwitch=ignore    HandleLidSwitchExternalPower=ignore    HandleLidSwitchDocked=ignore</code></p> </li> <li> <p><code>ignore</code>: Prevents any action when the lid is closed.</p> </li> <li> <p>These settings ensure that the external monitor remains active when the lid is closed.</p> </li> <li> <p>Save and exit the file.</p> </li> <li> <p>Restart the <code>systemd-logind</code> service to apply the changes:    <code>bash    sudo systemctl restart systemd-logind</code></p> </li> </ol>"},{"location":"SysAdmin/i3wm/#2-configure-display-settings","title":"2. Configure Display Settings","text":"<p>You may need to adjust your display settings to ensure the external monitor remains active when the lid is closed.</p> <ul> <li>Use a tool like <code>xrandr</code> to configure your display setup. For example:   <code>bash   xrandr --output &lt;external-monitor&gt; --primary --output &lt;laptop-screen&gt; --off</code>   Replace <code>&lt;external-monitor&gt;</code> and <code>&lt;laptop-screen&gt;</code> with the appropriate names for your displays (e.g., <code>HDMI1</code>, <code>eDP1</code>).</li> </ul>"},{"location":"SysAdmin/i3wm/#3-test-the-setup","title":"3. Test the Setup","text":"<ol> <li>Connect your external monitor.</li> <li>Close the laptop lid.</li> <li>Verify that the external monitor remains active and functional.</li> </ol> <p>Let me know if you encounter any issues!</p>"}]}